
221102_stm32f411_drivers_I2CbyGPIO.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000007bc  08000198  08000198  00010198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000954  0800095c  0001095c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000954  08000954  0001095c  2**0
                  CONTENTS
  4 .ARM          00000000  08000954  08000954  0001095c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000954  0800095c  0001095c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000954  08000954  00010954  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000958  08000958  00010958  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  0001095c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000028  20000000  0800095c  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000028  0800095c  00020028  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0001095c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00000df5  00000000  00000000  0001098c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000360  00000000  00000000  00011781  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000110  00000000  00000000  00011ae8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000000e8  00000000  00000000  00011bf8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00002b4c  00000000  00000000  00011ce0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00001263  00000000  00000000  0001482c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0000a83a  00000000  00000000  00015a8f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000202c9  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000003ac  00000000  00000000  0002031c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000000 	.word	0x20000000
 80001b4:	00000000 	.word	0x00000000
 80001b8:	0800093c 	.word	0x0800093c

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000004 	.word	0x20000004
 80001d4:	0800093c 	.word	0x0800093c

080001d8 <delay>:


/************************************************************************************************/

void delay(uint32_t k)
{
 80001d8:	b480      	push	{r7}
 80001da:	b085      	sub	sp, #20
 80001dc:	af00      	add	r7, sp, #0
 80001de:	6078      	str	r0, [r7, #4]
    uint32_t i;
    for(i=0; i<k; i++)
 80001e0:	2300      	movs	r3, #0
 80001e2:	60fb      	str	r3, [r7, #12]
 80001e4:	e003      	b.n	80001ee <delay+0x16>
        __asm("nop");
 80001e6:	bf00      	nop
    for(i=0; i<k; i++)
 80001e8:	68fb      	ldr	r3, [r7, #12]
 80001ea:	3301      	adds	r3, #1
 80001ec:	60fb      	str	r3, [r7, #12]
 80001ee:	68fa      	ldr	r2, [r7, #12]
 80001f0:	687b      	ldr	r3, [r7, #4]
 80001f2:	429a      	cmp	r2, r3
 80001f4:	d3f7      	bcc.n	80001e6 <delay+0xe>
}
 80001f6:	bf00      	nop
 80001f8:	bf00      	nop
 80001fa:	3714      	adds	r7, #20
 80001fc:	46bd      	mov	sp, r7
 80001fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000202:	4770      	bx	lr

08000204 <reverse_IO>:

void reverse_IO(GPIO_Handle_t a)
{
 8000204:	b480      	push	{r7}
 8000206:	b085      	sub	sp, #20
 8000208:	af00      	add	r7, sp, #0
 800020a:	1d3b      	adds	r3, r7, #4
 800020c:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	if(a.GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IN)
 8000210:	7a7b      	ldrb	r3, [r7, #9]
 8000212:	2b00      	cmp	r3, #0
 8000214:	d102      	bne.n	800021c <reverse_IO+0x18>
	{
		a.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_OUT;
 8000216:	2301      	movs	r3, #1
 8000218:	727b      	strb	r3, [r7, #9]
	}
	else if (a.GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_OUT)
	{
		a.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_IN;
	}
}
 800021a:	e004      	b.n	8000226 <reverse_IO+0x22>
	else if (a.GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_OUT)
 800021c:	7a7b      	ldrb	r3, [r7, #9]
 800021e:	2b01      	cmp	r3, #1
 8000220:	d101      	bne.n	8000226 <reverse_IO+0x22>
		a.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_IN;
 8000222:	2300      	movs	r3, #0
 8000224:	727b      	strb	r3, [r7, #9]
}
 8000226:	bf00      	nop
 8000228:	3714      	adds	r7, #20
 800022a:	46bd      	mov	sp, r7
 800022c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000230:	4770      	bx	lr
	...

08000234 <GPIO_SCL_init>:

	GPIO_Init(&GPIOBtn);
}

void GPIO_SCL_init(void)
{
 8000234:	b580      	push	{r7, lr}
 8000236:	b084      	sub	sp, #16
 8000238:	af00      	add	r7, sp, #0
	GPIO_Handle_t sclGPIO;

	sclGPIO.pGPIOx = GPIOA;
 800023a:	4b09      	ldr	r3, [pc, #36]	; (8000260 <GPIO_SCL_init+0x2c>)
 800023c:	607b      	str	r3, [r7, #4]
	sclGPIO.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_5;
 800023e:	2305      	movs	r3, #5
 8000240:	723b      	strb	r3, [r7, #8]
	sclGPIO.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_OUT;
 8000242:	2301      	movs	r3, #1
 8000244:	727b      	strb	r3, [r7, #9]
	sclGPIO.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_FAST;
 8000246:	2302      	movs	r3, #2
 8000248:	72bb      	strb	r3, [r7, #10]
	sclGPIO.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_NO_PUPD;
 800024a:	2300      	movs	r3, #0
 800024c:	72fb      	strb	r3, [r7, #11]

	GPIO_Init(&sclGPIO);
 800024e:	1d3b      	adds	r3, r7, #4
 8000250:	4618      	mov	r0, r3
 8000252:	f000 f94d 	bl	80004f0 <GPIO_Init>

	//GPIO_ToggleOutputPin(GPIOA, 5);
}
 8000256:	bf00      	nop
 8000258:	3710      	adds	r7, #16
 800025a:	46bd      	mov	sp, r7
 800025c:	bd80      	pop	{r7, pc}
 800025e:	bf00      	nop
 8000260:	40020000 	.word	0x40020000

08000264 <GPIO_SDA_init>:

void GPIO_SDA_init(void)
{
 8000264:	b580      	push	{r7, lr}
 8000266:	b084      	sub	sp, #16
 8000268:	af00      	add	r7, sp, #0
	GPIO_Handle_t sdaGPIO;

	sdaGPIO.pGPIOx = GPIOA;
 800026a:	4b09      	ldr	r3, [pc, #36]	; (8000290 <GPIO_SDA_init+0x2c>)
 800026c:	607b      	str	r3, [r7, #4]
	sdaGPIO.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_6;
 800026e:	2306      	movs	r3, #6
 8000270:	723b      	strb	r3, [r7, #8]
	sdaGPIO.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_OUT;
 8000272:	2301      	movs	r3, #1
 8000274:	727b      	strb	r3, [r7, #9]
	sdaGPIO.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_FAST;
 8000276:	2302      	movs	r3, #2
 8000278:	72bb      	strb	r3, [r7, #10]
	sdaGPIO.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_NO_PUPD;
 800027a:	2300      	movs	r3, #0
 800027c:	72fb      	strb	r3, [r7, #11]

	GPIO_Init(&sdaGPIO);
 800027e:	1d3b      	adds	r3, r7, #4
 8000280:	4618      	mov	r0, r3
 8000282:	f000 f935 	bl	80004f0 <GPIO_Init>
}
 8000286:	bf00      	nop
 8000288:	3710      	adds	r7, #16
 800028a:	46bd      	mov	sp, r7
 800028c:	bd80      	pop	{r7, pc}
 800028e:	bf00      	nop
 8000290:	40020000 	.word	0x40020000

08000294 <i2c_start>:

void i2c_start(void)
{
 8000294:	b580      	push	{r7, lr}
 8000296:	af00      	add	r7, sp, #0
	GPIO_WriteToOutputPin(GPIOA, GPIO_PIN_NO_6, SET);
 8000298:	2201      	movs	r2, #1
 800029a:	2106      	movs	r1, #6
 800029c:	480f      	ldr	r0, [pc, #60]	; (80002dc <i2c_start+0x48>)
 800029e:	f000 fad9 	bl	8000854 <GPIO_WriteToOutputPin>
	delay(30);
 80002a2:	201e      	movs	r0, #30
 80002a4:	f7ff ff98 	bl	80001d8 <delay>
	GPIO_WriteToOutputPin(GPIOA, GPIO_PIN_NO_5, SET);
 80002a8:	2201      	movs	r2, #1
 80002aa:	2105      	movs	r1, #5
 80002ac:	480b      	ldr	r0, [pc, #44]	; (80002dc <i2c_start+0x48>)
 80002ae:	f000 fad1 	bl	8000854 <GPIO_WriteToOutputPin>
	delay(30);
 80002b2:	201e      	movs	r0, #30
 80002b4:	f7ff ff90 	bl	80001d8 <delay>

	GPIO_WriteToOutputPin(GPIOA, GPIO_PIN_NO_6, RESET);
 80002b8:	2200      	movs	r2, #0
 80002ba:	2106      	movs	r1, #6
 80002bc:	4807      	ldr	r0, [pc, #28]	; (80002dc <i2c_start+0x48>)
 80002be:	f000 fac9 	bl	8000854 <GPIO_WriteToOutputPin>
	delay(30);
 80002c2:	201e      	movs	r0, #30
 80002c4:	f7ff ff88 	bl	80001d8 <delay>
	GPIO_WriteToOutputPin(GPIOA, GPIO_PIN_NO_5, RESET);
 80002c8:	2200      	movs	r2, #0
 80002ca:	2105      	movs	r1, #5
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <i2c_start+0x48>)
 80002ce:	f000 fac1 	bl	8000854 <GPIO_WriteToOutputPin>
	delay(30);
 80002d2:	201e      	movs	r0, #30
 80002d4:	f7ff ff80 	bl	80001d8 <delay>
}
 80002d8:	bf00      	nop
 80002da:	bd80      	pop	{r7, pc}
 80002dc:	40020000 	.word	0x40020000

080002e0 <i2c_stop>:

void i2c_stop(void)
{
 80002e0:	b580      	push	{r7, lr}
 80002e2:	af00      	add	r7, sp, #0
	GPIO_WriteToOutputPin(GPIOA, GPIO_PIN_NO_6, RESET);
 80002e4:	2200      	movs	r2, #0
 80002e6:	2106      	movs	r1, #6
 80002e8:	480b      	ldr	r0, [pc, #44]	; (8000318 <i2c_stop+0x38>)
 80002ea:	f000 fab3 	bl	8000854 <GPIO_WriteToOutputPin>
	delay(30);
 80002ee:	201e      	movs	r0, #30
 80002f0:	f7ff ff72 	bl	80001d8 <delay>
	GPIO_WriteToOutputPin(GPIOA, GPIO_PIN_NO_5, SET);
 80002f4:	2201      	movs	r2, #1
 80002f6:	2105      	movs	r1, #5
 80002f8:	4807      	ldr	r0, [pc, #28]	; (8000318 <i2c_stop+0x38>)
 80002fa:	f000 faab 	bl	8000854 <GPIO_WriteToOutputPin>
	delay(30);
 80002fe:	201e      	movs	r0, #30
 8000300:	f7ff ff6a 	bl	80001d8 <delay>
	GPIO_WriteToOutputPin(GPIOA, GPIO_PIN_NO_6, SET);
 8000304:	2201      	movs	r2, #1
 8000306:	2106      	movs	r1, #6
 8000308:	4803      	ldr	r0, [pc, #12]	; (8000318 <i2c_stop+0x38>)
 800030a:	f000 faa3 	bl	8000854 <GPIO_WriteToOutputPin>
	delay(30);
 800030e:	201e      	movs	r0, #30
 8000310:	f7ff ff62 	bl	80001d8 <delay>
}
 8000314:	bf00      	nop
 8000316:	bd80      	pop	{r7, pc}
 8000318:	40020000 	.word	0x40020000

0800031c <i2c_write>:

unsigned char i2c_write(unsigned char data)
{
 800031c:	b580      	push	{r7, lr}
 800031e:	b084      	sub	sp, #16
 8000320:	af00      	add	r7, sp, #0
 8000322:	4603      	mov	r3, r0
 8000324:	71fb      	strb	r3, [r7, #7]
	unsigned char idx;

	//write the 8bit data
	for (idx = 0; idx < 8; idx++) {
 8000326:	2300      	movs	r3, #0
 8000328:	73fb      	strb	r3, [r7, #15]
 800032a:	e014      	b.n	8000356 <i2c_write+0x3a>
		if(data & 0x80)
 800032c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000330:	2b00      	cmp	r3, #0
 8000332:	da05      	bge.n	8000340 <i2c_write+0x24>
			GPIO_WriteToOutputPin(GPIOA, GPIO_PIN_NO_6, SET);
 8000334:	2201      	movs	r2, #1
 8000336:	2106      	movs	r1, #6
 8000338:	481c      	ldr	r0, [pc, #112]	; (80003ac <i2c_write+0x90>)
 800033a:	f000 fa8b 	bl	8000854 <GPIO_WriteToOutputPin>
 800033e:	e004      	b.n	800034a <i2c_write+0x2e>
		else
			GPIO_WriteToOutputPin(GPIOA, GPIO_PIN_NO_6, RESET);
 8000340:	2200      	movs	r2, #0
 8000342:	2106      	movs	r1, #6
 8000344:	4819      	ldr	r0, [pc, #100]	; (80003ac <i2c_write+0x90>)
 8000346:	f000 fa85 	bl	8000854 <GPIO_WriteToOutputPin>

		data = data << 1;
 800034a:	79fb      	ldrb	r3, [r7, #7]
 800034c:	005b      	lsls	r3, r3, #1
 800034e:	71fb      	strb	r3, [r7, #7]
	for (idx = 0; idx < 8; idx++) {
 8000350:	7bfb      	ldrb	r3, [r7, #15]
 8000352:	3301      	adds	r3, #1
 8000354:	73fb      	strb	r3, [r7, #15]
 8000356:	7bfb      	ldrb	r3, [r7, #15]
 8000358:	2b07      	cmp	r3, #7
 800035a:	d9e7      	bls.n	800032c <i2c_write+0x10>
	}

	//reading ack or nack
	GPIO_WriteToOutputPin(GPIOA, GPIO_PIN_NO_6, SET); 	//leave sda high
 800035c:	2201      	movs	r2, #1
 800035e:	2106      	movs	r1, #6
 8000360:	4812      	ldr	r0, [pc, #72]	; (80003ac <i2c_write+0x90>)
 8000362:	f000 fa77 	bl	8000854 <GPIO_WriteToOutputPin>
	reverse_IO(sdaGPIO);								//change the sda direction input
 8000366:	4b12      	ldr	r3, [pc, #72]	; (80003b0 <i2c_write+0x94>)
 8000368:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800036c:	f7ff ff4a 	bl	8000204 <reverse_IO>

	delay(30);
 8000370:	201e      	movs	r0, #30
 8000372:	f7ff ff31 	bl	80001d8 <delay>

	GPIO_WriteToOutputPin(GPIOA, GPIO_PIN_NO_5, SET);	//clock restart
 8000376:	2201      	movs	r2, #1
 8000378:	2105      	movs	r1, #5
 800037a:	480c      	ldr	r0, [pc, #48]	; (80003ac <i2c_write+0x90>)
 800037c:	f000 fa6a 	bl	8000854 <GPIO_WriteToOutputPin>

	idx = GPIO_ReadFromInputPin(GPIOA, GPIO_PIN_NO_6);	//get ack bit
 8000380:	2106      	movs	r1, #6
 8000382:	480a      	ldr	r0, [pc, #40]	; (80003ac <i2c_write+0x90>)
 8000384:	f000 fa50 	bl	8000828 <GPIO_ReadFromInputPin>
 8000388:	4603      	mov	r3, r0
 800038a:	73fb      	strb	r3, [r7, #15]

	GPIO_WriteToOutputPin(GPIOA, GPIO_PIN_NO_5, RESET);
 800038c:	2200      	movs	r2, #0
 800038e:	2105      	movs	r1, #5
 8000390:	4806      	ldr	r0, [pc, #24]	; (80003ac <i2c_write+0x90>)
 8000392:	f000 fa5f 	bl	8000854 <GPIO_WriteToOutputPin>
	reverse_IO(sdaGPIO);								//reset the sda direction output
 8000396:	4b06      	ldr	r3, [pc, #24]	; (80003b0 <i2c_write+0x94>)
 8000398:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800039c:	f7ff ff32 	bl	8000204 <reverse_IO>

	return idx;
 80003a0:	7bfb      	ldrb	r3, [r7, #15]

}
 80003a2:	4618      	mov	r0, r3
 80003a4:	3710      	adds	r7, #16
 80003a6:	46bd      	mov	sp, r7
 80003a8:	bd80      	pop	{r7, pc}
 80003aa:	bf00      	nop
 80003ac:	40020000 	.word	0x40020000
 80003b0:	2000001c 	.word	0x2000001c

080003b4 <main>:

	return data;
}

int main(void)
{
 80003b4:	b580      	push	{r7, lr}
 80003b6:	b082      	sub	sp, #8
 80003b8:	af00      	add	r7, sp, #0
//		I2C_MasterSendData(&I2C1Handle,some_data,strlen((char*)some_data),SLAVE_ADDR,0);
//	}
	/************************************************************************************************/
	//GPIO_ButonInit();

	unsigned char input = 0x55;
 80003ba:	2355      	movs	r3, #85	; 0x55
 80003bc:	71fb      	strb	r3, [r7, #7]

	/*Set the Idel state*/
	GPIO_SCL_init();
 80003be:	f7ff ff39 	bl	8000234 <GPIO_SCL_init>
	GPIO_SDA_init();
 80003c2:	f7ff ff4f 	bl	8000264 <GPIO_SDA_init>
//			//GPIO_WriteToOutputPin(GPIOA, 13, 0); //SDA low -> Start bit
//			GPIO_ToggleOutputPin(GPIOA, GPIO_PIN_NO_6);
//			delay(30);
//			//i2c_send_Byte(0x55);
			//i2c_start();
			i2c_write(SLAVE_ADDR);
 80003c6:	2068      	movs	r0, #104	; 0x68
 80003c8:	f7ff ffa8 	bl	800031c <i2c_write>
			i2c_stop();
 80003cc:	f7ff ff88 	bl	80002e0 <i2c_stop>

			i2c_start();
 80003d0:	f7ff ff60 	bl	8000294 <i2c_start>
			i2c_write(input);
 80003d4:	79fb      	ldrb	r3, [r7, #7]
 80003d6:	4618      	mov	r0, r3
 80003d8:	f7ff ffa0 	bl	800031c <i2c_write>
			i2c_stop();
 80003dc:	f7ff ff80 	bl	80002e0 <i2c_stop>
			i2c_write(SLAVE_ADDR);
 80003e0:	e7f1      	b.n	80003c6 <main+0x12>
	...

080003e4 <GPIO_PeriClockControl>:
 *
 * @Note              -  none

 */
void GPIO_PeriClockControl(GPIO_RegDef_t *pGPIOx, uint8_t EnorDi)
{
 80003e4:	b480      	push	{r7}
 80003e6:	b083      	sub	sp, #12
 80003e8:	af00      	add	r7, sp, #0
 80003ea:	6078      	str	r0, [r7, #4]
 80003ec:	460b      	mov	r3, r1
 80003ee:	70fb      	strb	r3, [r7, #3]
	if(EnorDi == ENABLE)
 80003f0:	78fb      	ldrb	r3, [r7, #3]
 80003f2:	2b01      	cmp	r3, #1
 80003f4:	d161      	bne.n	80004ba <GPIO_PeriClockControl+0xd6>
	{
		if(pGPIOx == GPIOA)
 80003f6:	687b      	ldr	r3, [r7, #4]
 80003f8:	4a33      	ldr	r2, [pc, #204]	; (80004c8 <GPIO_PeriClockControl+0xe4>)
 80003fa:	4293      	cmp	r3, r2
 80003fc:	d106      	bne.n	800040c <GPIO_PeriClockControl+0x28>
		{
			GPIOA_PCLK_EN();
 80003fe:	4b33      	ldr	r3, [pc, #204]	; (80004cc <GPIO_PeriClockControl+0xe8>)
 8000400:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000402:	4a32      	ldr	r2, [pc, #200]	; (80004cc <GPIO_PeriClockControl+0xe8>)
 8000404:	f043 0301 	orr.w	r3, r3, #1
 8000408:	6313      	str	r3, [r2, #48]	; 0x30
	else
	{
		//TODO
	}

}
 800040a:	e056      	b.n	80004ba <GPIO_PeriClockControl+0xd6>
		}else if (pGPIOx == GPIOB)
 800040c:	687b      	ldr	r3, [r7, #4]
 800040e:	4a30      	ldr	r2, [pc, #192]	; (80004d0 <GPIO_PeriClockControl+0xec>)
 8000410:	4293      	cmp	r3, r2
 8000412:	d106      	bne.n	8000422 <GPIO_PeriClockControl+0x3e>
			GPIOB_PCLK_EN();
 8000414:	4b2d      	ldr	r3, [pc, #180]	; (80004cc <GPIO_PeriClockControl+0xe8>)
 8000416:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000418:	4a2c      	ldr	r2, [pc, #176]	; (80004cc <GPIO_PeriClockControl+0xe8>)
 800041a:	f043 0302 	orr.w	r3, r3, #2
 800041e:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000420:	e04b      	b.n	80004ba <GPIO_PeriClockControl+0xd6>
		}else if (pGPIOx == GPIOC)
 8000422:	687b      	ldr	r3, [r7, #4]
 8000424:	4a2b      	ldr	r2, [pc, #172]	; (80004d4 <GPIO_PeriClockControl+0xf0>)
 8000426:	4293      	cmp	r3, r2
 8000428:	d106      	bne.n	8000438 <GPIO_PeriClockControl+0x54>
			GPIOC_PCLK_EN();
 800042a:	4b28      	ldr	r3, [pc, #160]	; (80004cc <GPIO_PeriClockControl+0xe8>)
 800042c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800042e:	4a27      	ldr	r2, [pc, #156]	; (80004cc <GPIO_PeriClockControl+0xe8>)
 8000430:	f043 0304 	orr.w	r3, r3, #4
 8000434:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000436:	e040      	b.n	80004ba <GPIO_PeriClockControl+0xd6>
		}else if (pGPIOx == GPIOD)
 8000438:	687b      	ldr	r3, [r7, #4]
 800043a:	4a27      	ldr	r2, [pc, #156]	; (80004d8 <GPIO_PeriClockControl+0xf4>)
 800043c:	4293      	cmp	r3, r2
 800043e:	d106      	bne.n	800044e <GPIO_PeriClockControl+0x6a>
			GPIOD_PCLK_EN();
 8000440:	4b22      	ldr	r3, [pc, #136]	; (80004cc <GPIO_PeriClockControl+0xe8>)
 8000442:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000444:	4a21      	ldr	r2, [pc, #132]	; (80004cc <GPIO_PeriClockControl+0xe8>)
 8000446:	f043 0308 	orr.w	r3, r3, #8
 800044a:	6313      	str	r3, [r2, #48]	; 0x30
}
 800044c:	e035      	b.n	80004ba <GPIO_PeriClockControl+0xd6>
		}else if (pGPIOx == GPIOE)
 800044e:	687b      	ldr	r3, [r7, #4]
 8000450:	4a22      	ldr	r2, [pc, #136]	; (80004dc <GPIO_PeriClockControl+0xf8>)
 8000452:	4293      	cmp	r3, r2
 8000454:	d106      	bne.n	8000464 <GPIO_PeriClockControl+0x80>
			GPIOE_PCLK_EN();
 8000456:	4b1d      	ldr	r3, [pc, #116]	; (80004cc <GPIO_PeriClockControl+0xe8>)
 8000458:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800045a:	4a1c      	ldr	r2, [pc, #112]	; (80004cc <GPIO_PeriClockControl+0xe8>)
 800045c:	f043 0310 	orr.w	r3, r3, #16
 8000460:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000462:	e02a      	b.n	80004ba <GPIO_PeriClockControl+0xd6>
		}else if (pGPIOx == GPIOF)
 8000464:	687b      	ldr	r3, [r7, #4]
 8000466:	4a1e      	ldr	r2, [pc, #120]	; (80004e0 <GPIO_PeriClockControl+0xfc>)
 8000468:	4293      	cmp	r3, r2
 800046a:	d106      	bne.n	800047a <GPIO_PeriClockControl+0x96>
			GPIOF_PCLK_EN();
 800046c:	4b17      	ldr	r3, [pc, #92]	; (80004cc <GPIO_PeriClockControl+0xe8>)
 800046e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000470:	4a16      	ldr	r2, [pc, #88]	; (80004cc <GPIO_PeriClockControl+0xe8>)
 8000472:	f043 0320 	orr.w	r3, r3, #32
 8000476:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000478:	e01f      	b.n	80004ba <GPIO_PeriClockControl+0xd6>
		}else if (pGPIOx == GPIOG)
 800047a:	687b      	ldr	r3, [r7, #4]
 800047c:	4a19      	ldr	r2, [pc, #100]	; (80004e4 <GPIO_PeriClockControl+0x100>)
 800047e:	4293      	cmp	r3, r2
 8000480:	d106      	bne.n	8000490 <GPIO_PeriClockControl+0xac>
			GPIOG_PCLK_EN();
 8000482:	4b12      	ldr	r3, [pc, #72]	; (80004cc <GPIO_PeriClockControl+0xe8>)
 8000484:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000486:	4a11      	ldr	r2, [pc, #68]	; (80004cc <GPIO_PeriClockControl+0xe8>)
 8000488:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800048c:	6313      	str	r3, [r2, #48]	; 0x30
}
 800048e:	e014      	b.n	80004ba <GPIO_PeriClockControl+0xd6>
		}else if (pGPIOx == GPIOH)
 8000490:	687b      	ldr	r3, [r7, #4]
 8000492:	4a15      	ldr	r2, [pc, #84]	; (80004e8 <GPIO_PeriClockControl+0x104>)
 8000494:	4293      	cmp	r3, r2
 8000496:	d106      	bne.n	80004a6 <GPIO_PeriClockControl+0xc2>
			GPIOH_PCLK_EN();
 8000498:	4b0c      	ldr	r3, [pc, #48]	; (80004cc <GPIO_PeriClockControl+0xe8>)
 800049a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800049c:	4a0b      	ldr	r2, [pc, #44]	; (80004cc <GPIO_PeriClockControl+0xe8>)
 800049e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80004a2:	6313      	str	r3, [r2, #48]	; 0x30
}
 80004a4:	e009      	b.n	80004ba <GPIO_PeriClockControl+0xd6>
		}else if (pGPIOx == GPIOI)
 80004a6:	687b      	ldr	r3, [r7, #4]
 80004a8:	4a10      	ldr	r2, [pc, #64]	; (80004ec <GPIO_PeriClockControl+0x108>)
 80004aa:	4293      	cmp	r3, r2
 80004ac:	d105      	bne.n	80004ba <GPIO_PeriClockControl+0xd6>
			GPIOI_PCLK_EN();
 80004ae:	4b07      	ldr	r3, [pc, #28]	; (80004cc <GPIO_PeriClockControl+0xe8>)
 80004b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80004b2:	4a06      	ldr	r2, [pc, #24]	; (80004cc <GPIO_PeriClockControl+0xe8>)
 80004b4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80004b8:	6313      	str	r3, [r2, #48]	; 0x30
}
 80004ba:	bf00      	nop
 80004bc:	370c      	adds	r7, #12
 80004be:	46bd      	mov	sp, r7
 80004c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004c4:	4770      	bx	lr
 80004c6:	bf00      	nop
 80004c8:	40020000 	.word	0x40020000
 80004cc:	40023800 	.word	0x40023800
 80004d0:	40020400 	.word	0x40020400
 80004d4:	40020800 	.word	0x40020800
 80004d8:	40020c00 	.word	0x40020c00
 80004dc:	40021000 	.word	0x40021000
 80004e0:	40021400 	.word	0x40021400
 80004e4:	40021800 	.word	0x40021800
 80004e8:	40021c00 	.word	0x40021c00
 80004ec:	40022000 	.word	0x40022000

080004f0 <GPIO_Init>:
 *
 * @Note              -

 */
void GPIO_Init(GPIO_Handle_t *pGPIOHandle)
{
 80004f0:	b580      	push	{r7, lr}
 80004f2:	b086      	sub	sp, #24
 80004f4:	af00      	add	r7, sp, #0
 80004f6:	6078      	str	r0, [r7, #4]
	 uint32_t temp=0; //temp. register
 80004f8:	2300      	movs	r3, #0
 80004fa:	617b      	str	r3, [r7, #20]

	 //enable the peripheral clock

	 GPIO_PeriClockControl(pGPIOHandle->pGPIOx, ENABLE);
 80004fc:	687b      	ldr	r3, [r7, #4]
 80004fe:	681b      	ldr	r3, [r3, #0]
 8000500:	2101      	movs	r1, #1
 8000502:	4618      	mov	r0, r3
 8000504:	f7ff ff6e 	bl	80003e4 <GPIO_PeriClockControl>

	//1 . configure the mode of gpio pin

	if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode <= GPIO_MODE_ANALOG)
 8000508:	687b      	ldr	r3, [r7, #4]
 800050a:	795b      	ldrb	r3, [r3, #5]
 800050c:	2b03      	cmp	r3, #3
 800050e:	d820      	bhi.n	8000552 <GPIO_Init+0x62>
	{
		//the non interrupt mode
		temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber ) );
 8000510:	687b      	ldr	r3, [r7, #4]
 8000512:	795b      	ldrb	r3, [r3, #5]
 8000514:	461a      	mov	r2, r3
 8000516:	687b      	ldr	r3, [r7, #4]
 8000518:	791b      	ldrb	r3, [r3, #4]
 800051a:	005b      	lsls	r3, r3, #1
 800051c:	fa02 f303 	lsl.w	r3, r2, r3
 8000520:	617b      	str	r3, [r7, #20]
		pGPIOHandle->pGPIOx->MODER &= ~( 0x3 << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber)); //clearing
 8000522:	687b      	ldr	r3, [r7, #4]
 8000524:	681b      	ldr	r3, [r3, #0]
 8000526:	681a      	ldr	r2, [r3, #0]
 8000528:	687b      	ldr	r3, [r7, #4]
 800052a:	791b      	ldrb	r3, [r3, #4]
 800052c:	005b      	lsls	r3, r3, #1
 800052e:	2103      	movs	r1, #3
 8000530:	fa01 f303 	lsl.w	r3, r1, r3
 8000534:	43db      	mvns	r3, r3
 8000536:	4619      	mov	r1, r3
 8000538:	687b      	ldr	r3, [r7, #4]
 800053a:	681b      	ldr	r3, [r3, #0]
 800053c:	400a      	ands	r2, r1
 800053e:	601a      	str	r2, [r3, #0]
		pGPIOHandle->pGPIOx->MODER |= temp; //setting
 8000540:	687b      	ldr	r3, [r7, #4]
 8000542:	681b      	ldr	r3, [r3, #0]
 8000544:	6819      	ldr	r1, [r3, #0]
 8000546:	687b      	ldr	r3, [r7, #4]
 8000548:	681b      	ldr	r3, [r3, #0]
 800054a:	697a      	ldr	r2, [r7, #20]
 800054c:	430a      	orrs	r2, r1
 800054e:	601a      	str	r2, [r3, #0]
 8000550:	e0cb      	b.n	80006ea <GPIO_Init+0x1fa>

	}else
	{
		//this part will code later . ( interrupt mode)
		if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode ==GPIO_MODE_IT_FT )
 8000552:	687b      	ldr	r3, [r7, #4]
 8000554:	795b      	ldrb	r3, [r3, #5]
 8000556:	2b04      	cmp	r3, #4
 8000558:	d117      	bne.n	800058a <GPIO_Init+0x9a>
		{
			//1. configure the FTSR
			EXTI->FTSR |= ( 1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 800055a:	4b4b      	ldr	r3, [pc, #300]	; (8000688 <GPIO_Init+0x198>)
 800055c:	68db      	ldr	r3, [r3, #12]
 800055e:	687a      	ldr	r2, [r7, #4]
 8000560:	7912      	ldrb	r2, [r2, #4]
 8000562:	4611      	mov	r1, r2
 8000564:	2201      	movs	r2, #1
 8000566:	408a      	lsls	r2, r1
 8000568:	4611      	mov	r1, r2
 800056a:	4a47      	ldr	r2, [pc, #284]	; (8000688 <GPIO_Init+0x198>)
 800056c:	430b      	orrs	r3, r1
 800056e:	60d3      	str	r3, [r2, #12]
			//Clear the corresponding RTSR bit
			EXTI->RTSR &= ~( 1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000570:	4b45      	ldr	r3, [pc, #276]	; (8000688 <GPIO_Init+0x198>)
 8000572:	689b      	ldr	r3, [r3, #8]
 8000574:	687a      	ldr	r2, [r7, #4]
 8000576:	7912      	ldrb	r2, [r2, #4]
 8000578:	4611      	mov	r1, r2
 800057a:	2201      	movs	r2, #1
 800057c:	408a      	lsls	r2, r1
 800057e:	43d2      	mvns	r2, r2
 8000580:	4611      	mov	r1, r2
 8000582:	4a41      	ldr	r2, [pc, #260]	; (8000688 <GPIO_Init+0x198>)
 8000584:	400b      	ands	r3, r1
 8000586:	6093      	str	r3, [r2, #8]
 8000588:	e035      	b.n	80005f6 <GPIO_Init+0x106>

		}else if (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode ==GPIO_MODE_IT_RT )
 800058a:	687b      	ldr	r3, [r7, #4]
 800058c:	795b      	ldrb	r3, [r3, #5]
 800058e:	2b05      	cmp	r3, #5
 8000590:	d117      	bne.n	80005c2 <GPIO_Init+0xd2>
		{
			//1 . configure the RTSR
			EXTI->RTSR |= ( 1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000592:	4b3d      	ldr	r3, [pc, #244]	; (8000688 <GPIO_Init+0x198>)
 8000594:	689b      	ldr	r3, [r3, #8]
 8000596:	687a      	ldr	r2, [r7, #4]
 8000598:	7912      	ldrb	r2, [r2, #4]
 800059a:	4611      	mov	r1, r2
 800059c:	2201      	movs	r2, #1
 800059e:	408a      	lsls	r2, r1
 80005a0:	4611      	mov	r1, r2
 80005a2:	4a39      	ldr	r2, [pc, #228]	; (8000688 <GPIO_Init+0x198>)
 80005a4:	430b      	orrs	r3, r1
 80005a6:	6093      	str	r3, [r2, #8]
			//Clear the corresponding RTSR bit
			EXTI->FTSR &= ~( 1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80005a8:	4b37      	ldr	r3, [pc, #220]	; (8000688 <GPIO_Init+0x198>)
 80005aa:	68db      	ldr	r3, [r3, #12]
 80005ac:	687a      	ldr	r2, [r7, #4]
 80005ae:	7912      	ldrb	r2, [r2, #4]
 80005b0:	4611      	mov	r1, r2
 80005b2:	2201      	movs	r2, #1
 80005b4:	408a      	lsls	r2, r1
 80005b6:	43d2      	mvns	r2, r2
 80005b8:	4611      	mov	r1, r2
 80005ba:	4a33      	ldr	r2, [pc, #204]	; (8000688 <GPIO_Init+0x198>)
 80005bc:	400b      	ands	r3, r1
 80005be:	60d3      	str	r3, [r2, #12]
 80005c0:	e019      	b.n	80005f6 <GPIO_Init+0x106>

		}else if (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_RFT )
 80005c2:	687b      	ldr	r3, [r7, #4]
 80005c4:	795b      	ldrb	r3, [r3, #5]
 80005c6:	2b06      	cmp	r3, #6
 80005c8:	d115      	bne.n	80005f6 <GPIO_Init+0x106>
		{
			//1. configure both FTSR and RTSR
			EXTI->RTSR |= ( 1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80005ca:	4b2f      	ldr	r3, [pc, #188]	; (8000688 <GPIO_Init+0x198>)
 80005cc:	689b      	ldr	r3, [r3, #8]
 80005ce:	687a      	ldr	r2, [r7, #4]
 80005d0:	7912      	ldrb	r2, [r2, #4]
 80005d2:	4611      	mov	r1, r2
 80005d4:	2201      	movs	r2, #1
 80005d6:	408a      	lsls	r2, r1
 80005d8:	4611      	mov	r1, r2
 80005da:	4a2b      	ldr	r2, [pc, #172]	; (8000688 <GPIO_Init+0x198>)
 80005dc:	430b      	orrs	r3, r1
 80005de:	6093      	str	r3, [r2, #8]
			//Clear the corresponding RTSR bit
			EXTI->FTSR |= ( 1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80005e0:	4b29      	ldr	r3, [pc, #164]	; (8000688 <GPIO_Init+0x198>)
 80005e2:	68db      	ldr	r3, [r3, #12]
 80005e4:	687a      	ldr	r2, [r7, #4]
 80005e6:	7912      	ldrb	r2, [r2, #4]
 80005e8:	4611      	mov	r1, r2
 80005ea:	2201      	movs	r2, #1
 80005ec:	408a      	lsls	r2, r1
 80005ee:	4611      	mov	r1, r2
 80005f0:	4a25      	ldr	r2, [pc, #148]	; (8000688 <GPIO_Init+0x198>)
 80005f2:	430b      	orrs	r3, r1
 80005f4:	60d3      	str	r3, [r2, #12]
		}

		//2. configure the GPIO port selection in SYSCFG_EXTICR
		uint8_t temp1 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber / 4 ;
 80005f6:	687b      	ldr	r3, [r7, #4]
 80005f8:	791b      	ldrb	r3, [r3, #4]
 80005fa:	089b      	lsrs	r3, r3, #2
 80005fc:	74fb      	strb	r3, [r7, #19]
		uint8_t temp2 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber % 4;
 80005fe:	687b      	ldr	r3, [r7, #4]
 8000600:	791b      	ldrb	r3, [r3, #4]
 8000602:	f003 0303 	and.w	r3, r3, #3
 8000606:	74bb      	strb	r3, [r7, #18]
		uint8_t portcode = GPIO_BASEADDR_TO_CODE(pGPIOHandle->pGPIOx);
 8000608:	687b      	ldr	r3, [r7, #4]
 800060a:	681b      	ldr	r3, [r3, #0]
 800060c:	4a1f      	ldr	r2, [pc, #124]	; (800068c <GPIO_Init+0x19c>)
 800060e:	4293      	cmp	r3, r2
 8000610:	d04e      	beq.n	80006b0 <GPIO_Init+0x1c0>
 8000612:	687b      	ldr	r3, [r7, #4]
 8000614:	681b      	ldr	r3, [r3, #0]
 8000616:	4a1e      	ldr	r2, [pc, #120]	; (8000690 <GPIO_Init+0x1a0>)
 8000618:	4293      	cmp	r3, r2
 800061a:	d032      	beq.n	8000682 <GPIO_Init+0x192>
 800061c:	687b      	ldr	r3, [r7, #4]
 800061e:	681b      	ldr	r3, [r3, #0]
 8000620:	4a1c      	ldr	r2, [pc, #112]	; (8000694 <GPIO_Init+0x1a4>)
 8000622:	4293      	cmp	r3, r2
 8000624:	d02b      	beq.n	800067e <GPIO_Init+0x18e>
 8000626:	687b      	ldr	r3, [r7, #4]
 8000628:	681b      	ldr	r3, [r3, #0]
 800062a:	4a1b      	ldr	r2, [pc, #108]	; (8000698 <GPIO_Init+0x1a8>)
 800062c:	4293      	cmp	r3, r2
 800062e:	d024      	beq.n	800067a <GPIO_Init+0x18a>
 8000630:	687b      	ldr	r3, [r7, #4]
 8000632:	681b      	ldr	r3, [r3, #0]
 8000634:	4a19      	ldr	r2, [pc, #100]	; (800069c <GPIO_Init+0x1ac>)
 8000636:	4293      	cmp	r3, r2
 8000638:	d01d      	beq.n	8000676 <GPIO_Init+0x186>
 800063a:	687b      	ldr	r3, [r7, #4]
 800063c:	681b      	ldr	r3, [r3, #0]
 800063e:	4a18      	ldr	r2, [pc, #96]	; (80006a0 <GPIO_Init+0x1b0>)
 8000640:	4293      	cmp	r3, r2
 8000642:	d016      	beq.n	8000672 <GPIO_Init+0x182>
 8000644:	687b      	ldr	r3, [r7, #4]
 8000646:	681b      	ldr	r3, [r3, #0]
 8000648:	4a16      	ldr	r2, [pc, #88]	; (80006a4 <GPIO_Init+0x1b4>)
 800064a:	4293      	cmp	r3, r2
 800064c:	d00f      	beq.n	800066e <GPIO_Init+0x17e>
 800064e:	687b      	ldr	r3, [r7, #4]
 8000650:	681b      	ldr	r3, [r3, #0]
 8000652:	4a15      	ldr	r2, [pc, #84]	; (80006a8 <GPIO_Init+0x1b8>)
 8000654:	4293      	cmp	r3, r2
 8000656:	d008      	beq.n	800066a <GPIO_Init+0x17a>
 8000658:	687b      	ldr	r3, [r7, #4]
 800065a:	681b      	ldr	r3, [r3, #0]
 800065c:	4a13      	ldr	r2, [pc, #76]	; (80006ac <GPIO_Init+0x1bc>)
 800065e:	4293      	cmp	r3, r2
 8000660:	d101      	bne.n	8000666 <GPIO_Init+0x176>
 8000662:	2308      	movs	r3, #8
 8000664:	e025      	b.n	80006b2 <GPIO_Init+0x1c2>
 8000666:	2300      	movs	r3, #0
 8000668:	e023      	b.n	80006b2 <GPIO_Init+0x1c2>
 800066a:	2307      	movs	r3, #7
 800066c:	e021      	b.n	80006b2 <GPIO_Init+0x1c2>
 800066e:	2306      	movs	r3, #6
 8000670:	e01f      	b.n	80006b2 <GPIO_Init+0x1c2>
 8000672:	2305      	movs	r3, #5
 8000674:	e01d      	b.n	80006b2 <GPIO_Init+0x1c2>
 8000676:	2304      	movs	r3, #4
 8000678:	e01b      	b.n	80006b2 <GPIO_Init+0x1c2>
 800067a:	2303      	movs	r3, #3
 800067c:	e019      	b.n	80006b2 <GPIO_Init+0x1c2>
 800067e:	2302      	movs	r3, #2
 8000680:	e017      	b.n	80006b2 <GPIO_Init+0x1c2>
 8000682:	2301      	movs	r3, #1
 8000684:	e015      	b.n	80006b2 <GPIO_Init+0x1c2>
 8000686:	bf00      	nop
 8000688:	40013c00 	.word	0x40013c00
 800068c:	40020000 	.word	0x40020000
 8000690:	40020400 	.word	0x40020400
 8000694:	40020800 	.word	0x40020800
 8000698:	40020c00 	.word	0x40020c00
 800069c:	40021000 	.word	0x40021000
 80006a0:	40021400 	.word	0x40021400
 80006a4:	40021800 	.word	0x40021800
 80006a8:	40021c00 	.word	0x40021c00
 80006ac:	40022000 	.word	0x40022000
 80006b0:	2300      	movs	r3, #0
 80006b2:	747b      	strb	r3, [r7, #17]
		SYSCFG_PCLK_EN();
 80006b4:	4b59      	ldr	r3, [pc, #356]	; (800081c <GPIO_Init+0x32c>)
 80006b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80006b8:	4a58      	ldr	r2, [pc, #352]	; (800081c <GPIO_Init+0x32c>)
 80006ba:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80006be:	6453      	str	r3, [r2, #68]	; 0x44
		SYSCFG->EXTICR[temp1] = portcode << ( temp2 * 4);
 80006c0:	7c7a      	ldrb	r2, [r7, #17]
 80006c2:	7cbb      	ldrb	r3, [r7, #18]
 80006c4:	009b      	lsls	r3, r3, #2
 80006c6:	fa02 f103 	lsl.w	r1, r2, r3
 80006ca:	4a55      	ldr	r2, [pc, #340]	; (8000820 <GPIO_Init+0x330>)
 80006cc:	7cfb      	ldrb	r3, [r7, #19]
 80006ce:	3302      	adds	r3, #2
 80006d0:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

		//3 . enable the exti interrupt delivery using IMR
		EXTI->IMR |= 1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber;
 80006d4:	4b53      	ldr	r3, [pc, #332]	; (8000824 <GPIO_Init+0x334>)
 80006d6:	681b      	ldr	r3, [r3, #0]
 80006d8:	687a      	ldr	r2, [r7, #4]
 80006da:	7912      	ldrb	r2, [r2, #4]
 80006dc:	4611      	mov	r1, r2
 80006de:	2201      	movs	r2, #1
 80006e0:	408a      	lsls	r2, r1
 80006e2:	4611      	mov	r1, r2
 80006e4:	4a4f      	ldr	r2, [pc, #316]	; (8000824 <GPIO_Init+0x334>)
 80006e6:	430b      	orrs	r3, r1
 80006e8:	6013      	str	r3, [r2, #0]
	}

	//2. configure the speed
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinSpeed << ( 2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber) );
 80006ea:	687b      	ldr	r3, [r7, #4]
 80006ec:	799b      	ldrb	r3, [r3, #6]
 80006ee:	461a      	mov	r2, r3
 80006f0:	687b      	ldr	r3, [r7, #4]
 80006f2:	791b      	ldrb	r3, [r3, #4]
 80006f4:	005b      	lsls	r3, r3, #1
 80006f6:	fa02 f303 	lsl.w	r3, r2, r3
 80006fa:	617b      	str	r3, [r7, #20]
	pGPIOHandle->pGPIOx->OSPEEDR &= ~( 0x3 << ( 2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber)); //clearing
 80006fc:	687b      	ldr	r3, [r7, #4]
 80006fe:	681b      	ldr	r3, [r3, #0]
 8000700:	689a      	ldr	r2, [r3, #8]
 8000702:	687b      	ldr	r3, [r7, #4]
 8000704:	791b      	ldrb	r3, [r3, #4]
 8000706:	005b      	lsls	r3, r3, #1
 8000708:	2103      	movs	r1, #3
 800070a:	fa01 f303 	lsl.w	r3, r1, r3
 800070e:	43db      	mvns	r3, r3
 8000710:	4619      	mov	r1, r3
 8000712:	687b      	ldr	r3, [r7, #4]
 8000714:	681b      	ldr	r3, [r3, #0]
 8000716:	400a      	ands	r2, r1
 8000718:	609a      	str	r2, [r3, #8]
	pGPIOHandle->pGPIOx->OSPEEDR |= temp;
 800071a:	687b      	ldr	r3, [r7, #4]
 800071c:	681b      	ldr	r3, [r3, #0]
 800071e:	6899      	ldr	r1, [r3, #8]
 8000720:	687b      	ldr	r3, [r7, #4]
 8000722:	681b      	ldr	r3, [r3, #0]
 8000724:	697a      	ldr	r2, [r7, #20]
 8000726:	430a      	orrs	r2, r1
 8000728:	609a      	str	r2, [r3, #8]

	//3. configure the pupd settings
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinPuPdControl << ( 2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber) );
 800072a:	687b      	ldr	r3, [r7, #4]
 800072c:	79db      	ldrb	r3, [r3, #7]
 800072e:	461a      	mov	r2, r3
 8000730:	687b      	ldr	r3, [r7, #4]
 8000732:	791b      	ldrb	r3, [r3, #4]
 8000734:	005b      	lsls	r3, r3, #1
 8000736:	fa02 f303 	lsl.w	r3, r2, r3
 800073a:	617b      	str	r3, [r7, #20]
	pGPIOHandle->pGPIOx->PUPDR &= ~( 0x3 << ( 2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber)); //clearing
 800073c:	687b      	ldr	r3, [r7, #4]
 800073e:	681b      	ldr	r3, [r3, #0]
 8000740:	68da      	ldr	r2, [r3, #12]
 8000742:	687b      	ldr	r3, [r7, #4]
 8000744:	791b      	ldrb	r3, [r3, #4]
 8000746:	005b      	lsls	r3, r3, #1
 8000748:	2103      	movs	r1, #3
 800074a:	fa01 f303 	lsl.w	r3, r1, r3
 800074e:	43db      	mvns	r3, r3
 8000750:	4619      	mov	r1, r3
 8000752:	687b      	ldr	r3, [r7, #4]
 8000754:	681b      	ldr	r3, [r3, #0]
 8000756:	400a      	ands	r2, r1
 8000758:	60da      	str	r2, [r3, #12]
	pGPIOHandle->pGPIOx->PUPDR |= temp;
 800075a:	687b      	ldr	r3, [r7, #4]
 800075c:	681b      	ldr	r3, [r3, #0]
 800075e:	68d9      	ldr	r1, [r3, #12]
 8000760:	687b      	ldr	r3, [r7, #4]
 8000762:	681b      	ldr	r3, [r3, #0]
 8000764:	697a      	ldr	r2, [r7, #20]
 8000766:	430a      	orrs	r2, r1
 8000768:	60da      	str	r2, [r3, #12]


	//4. configure the optype
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinOPType << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber );
 800076a:	687b      	ldr	r3, [r7, #4]
 800076c:	7a1b      	ldrb	r3, [r3, #8]
 800076e:	461a      	mov	r2, r3
 8000770:	687b      	ldr	r3, [r7, #4]
 8000772:	791b      	ldrb	r3, [r3, #4]
 8000774:	fa02 f303 	lsl.w	r3, r2, r3
 8000778:	617b      	str	r3, [r7, #20]
	pGPIOHandle->pGPIOx->OTYPER &= ~( 0x1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber); //clearing
 800077a:	687b      	ldr	r3, [r7, #4]
 800077c:	681b      	ldr	r3, [r3, #0]
 800077e:	685a      	ldr	r2, [r3, #4]
 8000780:	687b      	ldr	r3, [r7, #4]
 8000782:	791b      	ldrb	r3, [r3, #4]
 8000784:	4619      	mov	r1, r3
 8000786:	2301      	movs	r3, #1
 8000788:	408b      	lsls	r3, r1
 800078a:	43db      	mvns	r3, r3
 800078c:	4619      	mov	r1, r3
 800078e:	687b      	ldr	r3, [r7, #4]
 8000790:	681b      	ldr	r3, [r3, #0]
 8000792:	400a      	ands	r2, r1
 8000794:	605a      	str	r2, [r3, #4]
	pGPIOHandle->pGPIOx->OTYPER |= temp;
 8000796:	687b      	ldr	r3, [r7, #4]
 8000798:	681b      	ldr	r3, [r3, #0]
 800079a:	6859      	ldr	r1, [r3, #4]
 800079c:	687b      	ldr	r3, [r7, #4]
 800079e:	681b      	ldr	r3, [r3, #0]
 80007a0:	697a      	ldr	r2, [r7, #20]
 80007a2:	430a      	orrs	r2, r1
 80007a4:	605a      	str	r2, [r3, #4]

	//5. configure the alt functionality
	if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_ALTFN)
 80007a6:	687b      	ldr	r3, [r7, #4]
 80007a8:	795b      	ldrb	r3, [r3, #5]
 80007aa:	2b02      	cmp	r3, #2
 80007ac:	d131      	bne.n	8000812 <GPIO_Init+0x322>
	{
		//configure the alt function registers.
		uint8_t temp1, temp2;

		temp1 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber / 8;
 80007ae:	687b      	ldr	r3, [r7, #4]
 80007b0:	791b      	ldrb	r3, [r3, #4]
 80007b2:	08db      	lsrs	r3, r3, #3
 80007b4:	743b      	strb	r3, [r7, #16]
		temp2 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber  % 8;
 80007b6:	687b      	ldr	r3, [r7, #4]
 80007b8:	791b      	ldrb	r3, [r3, #4]
 80007ba:	f003 0307 	and.w	r3, r3, #7
 80007be:	73fb      	strb	r3, [r7, #15]
		pGPIOHandle->pGPIOx->AFR[temp1] &= ~(0xF << ( 4 * temp2 ) ); //clearing
 80007c0:	687b      	ldr	r3, [r7, #4]
 80007c2:	681b      	ldr	r3, [r3, #0]
 80007c4:	7c3a      	ldrb	r2, [r7, #16]
 80007c6:	3208      	adds	r2, #8
 80007c8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80007cc:	7bfb      	ldrb	r3, [r7, #15]
 80007ce:	009b      	lsls	r3, r3, #2
 80007d0:	220f      	movs	r2, #15
 80007d2:	fa02 f303 	lsl.w	r3, r2, r3
 80007d6:	43db      	mvns	r3, r3
 80007d8:	4618      	mov	r0, r3
 80007da:	687b      	ldr	r3, [r7, #4]
 80007dc:	681b      	ldr	r3, [r3, #0]
 80007de:	7c3a      	ldrb	r2, [r7, #16]
 80007e0:	4001      	ands	r1, r0
 80007e2:	3208      	adds	r2, #8
 80007e4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		pGPIOHandle->pGPIOx->AFR[temp1] |= (pGPIOHandle->GPIO_PinConfig.GPIO_PinAltFunMode << ( 4 * temp2 ) );
 80007e8:	687b      	ldr	r3, [r7, #4]
 80007ea:	681b      	ldr	r3, [r3, #0]
 80007ec:	7c3a      	ldrb	r2, [r7, #16]
 80007ee:	3208      	adds	r2, #8
 80007f0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80007f4:	687b      	ldr	r3, [r7, #4]
 80007f6:	7a5b      	ldrb	r3, [r3, #9]
 80007f8:	461a      	mov	r2, r3
 80007fa:	7bfb      	ldrb	r3, [r7, #15]
 80007fc:	009b      	lsls	r3, r3, #2
 80007fe:	fa02 f303 	lsl.w	r3, r2, r3
 8000802:	4618      	mov	r0, r3
 8000804:	687b      	ldr	r3, [r7, #4]
 8000806:	681b      	ldr	r3, [r3, #0]
 8000808:	7c3a      	ldrb	r2, [r7, #16]
 800080a:	4301      	orrs	r1, r0
 800080c:	3208      	adds	r2, #8
 800080e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	}

}
 8000812:	bf00      	nop
 8000814:	3718      	adds	r7, #24
 8000816:	46bd      	mov	sp, r7
 8000818:	bd80      	pop	{r7, pc}
 800081a:	bf00      	nop
 800081c:	40023800 	.word	0x40023800
 8000820:	40013800 	.word	0x40013800
 8000824:	40013c00 	.word	0x40013c00

08000828 <GPIO_ReadFromInputPin>:
 *
 * @Note              -

 */
uint8_t GPIO_ReadFromInputPin(GPIO_RegDef_t *pGPIOx, uint8_t PinNumber)
{
 8000828:	b480      	push	{r7}
 800082a:	b085      	sub	sp, #20
 800082c:	af00      	add	r7, sp, #0
 800082e:	6078      	str	r0, [r7, #4]
 8000830:	460b      	mov	r3, r1
 8000832:	70fb      	strb	r3, [r7, #3]
   uint8_t value;

   value = (uint8_t )((pGPIOx->IDR  >> PinNumber) & 0x00000001 ) ;
 8000834:	687b      	ldr	r3, [r7, #4]
 8000836:	691a      	ldr	r2, [r3, #16]
 8000838:	78fb      	ldrb	r3, [r7, #3]
 800083a:	fa22 f303 	lsr.w	r3, r2, r3
 800083e:	b2db      	uxtb	r3, r3
 8000840:	f003 0301 	and.w	r3, r3, #1
 8000844:	73fb      	strb	r3, [r7, #15]

   return value;
 8000846:	7bfb      	ldrb	r3, [r7, #15]
}
 8000848:	4618      	mov	r0, r3
 800084a:	3714      	adds	r7, #20
 800084c:	46bd      	mov	sp, r7
 800084e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000852:	4770      	bx	lr

08000854 <GPIO_WriteToOutputPin>:
 *
 * @Note              -

 */
void GPIO_WriteToOutputPin(GPIO_RegDef_t *pGPIOx, uint8_t PinNumber, uint8_t Value)
{
 8000854:	b480      	push	{r7}
 8000856:	b083      	sub	sp, #12
 8000858:	af00      	add	r7, sp, #0
 800085a:	6078      	str	r0, [r7, #4]
 800085c:	460b      	mov	r3, r1
 800085e:	70fb      	strb	r3, [r7, #3]
 8000860:	4613      	mov	r3, r2
 8000862:	70bb      	strb	r3, [r7, #2]

	if(Value == GPIO_PIN_SET)
 8000864:	78bb      	ldrb	r3, [r7, #2]
 8000866:	2b01      	cmp	r3, #1
 8000868:	d109      	bne.n	800087e <GPIO_WriteToOutputPin+0x2a>
	{
		//write 1 to the output data register at the bit field corresponding to the pin number
		pGPIOx->ODR |= ( 1 << PinNumber);
 800086a:	687b      	ldr	r3, [r7, #4]
 800086c:	695b      	ldr	r3, [r3, #20]
 800086e:	78fa      	ldrb	r2, [r7, #3]
 8000870:	2101      	movs	r1, #1
 8000872:	fa01 f202 	lsl.w	r2, r1, r2
 8000876:	431a      	orrs	r2, r3
 8000878:	687b      	ldr	r3, [r7, #4]
 800087a:	615a      	str	r2, [r3, #20]
	}else
	{
		//write 0
		pGPIOx->ODR &= ~( 1 << PinNumber);
	}
}
 800087c:	e009      	b.n	8000892 <GPIO_WriteToOutputPin+0x3e>
		pGPIOx->ODR &= ~( 1 << PinNumber);
 800087e:	687b      	ldr	r3, [r7, #4]
 8000880:	695b      	ldr	r3, [r3, #20]
 8000882:	78fa      	ldrb	r2, [r7, #3]
 8000884:	2101      	movs	r1, #1
 8000886:	fa01 f202 	lsl.w	r2, r1, r2
 800088a:	43d2      	mvns	r2, r2
 800088c:	401a      	ands	r2, r3
 800088e:	687b      	ldr	r3, [r7, #4]
 8000890:	615a      	str	r2, [r3, #20]
}
 8000892:	bf00      	nop
 8000894:	370c      	adds	r7, #12
 8000896:	46bd      	mov	sp, r7
 8000898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800089c:	4770      	bx	lr
	...

080008a0 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80008a0:	480d      	ldr	r0, [pc, #52]	; (80008d8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80008a2:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80008a4:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80008a8:	480c      	ldr	r0, [pc, #48]	; (80008dc <LoopForever+0x6>)
  ldr r1, =_edata
 80008aa:	490d      	ldr	r1, [pc, #52]	; (80008e0 <LoopForever+0xa>)
  ldr r2, =_sidata
 80008ac:	4a0d      	ldr	r2, [pc, #52]	; (80008e4 <LoopForever+0xe>)
  movs r3, #0
 80008ae:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80008b0:	e002      	b.n	80008b8 <LoopCopyDataInit>

080008b2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80008b2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80008b4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80008b6:	3304      	adds	r3, #4

080008b8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80008b8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80008ba:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80008bc:	d3f9      	bcc.n	80008b2 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80008be:	4a0a      	ldr	r2, [pc, #40]	; (80008e8 <LoopForever+0x12>)
  ldr r4, =_ebss
 80008c0:	4c0a      	ldr	r4, [pc, #40]	; (80008ec <LoopForever+0x16>)
  movs r3, #0
 80008c2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80008c4:	e001      	b.n	80008ca <LoopFillZerobss>

080008c6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80008c6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80008c8:	3204      	adds	r2, #4

080008ca <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80008ca:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80008cc:	d3fb      	bcc.n	80008c6 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80008ce:	f000 f811 	bl	80008f4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80008d2:	f7ff fd6f 	bl	80003b4 <main>

080008d6 <LoopForever>:

LoopForever:
    b LoopForever
 80008d6:	e7fe      	b.n	80008d6 <LoopForever>
  ldr   r0, =_estack
 80008d8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80008dc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80008e0:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 80008e4:	0800095c 	.word	0x0800095c
  ldr r2, =_sbss
 80008e8:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 80008ec:	20000028 	.word	0x20000028

080008f0 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80008f0:	e7fe      	b.n	80008f0 <ADC_IRQHandler>
	...

080008f4 <__libc_init_array>:
 80008f4:	b570      	push	{r4, r5, r6, lr}
 80008f6:	4d0d      	ldr	r5, [pc, #52]	; (800092c <__libc_init_array+0x38>)
 80008f8:	4c0d      	ldr	r4, [pc, #52]	; (8000930 <__libc_init_array+0x3c>)
 80008fa:	1b64      	subs	r4, r4, r5
 80008fc:	10a4      	asrs	r4, r4, #2
 80008fe:	2600      	movs	r6, #0
 8000900:	42a6      	cmp	r6, r4
 8000902:	d109      	bne.n	8000918 <__libc_init_array+0x24>
 8000904:	4d0b      	ldr	r5, [pc, #44]	; (8000934 <__libc_init_array+0x40>)
 8000906:	4c0c      	ldr	r4, [pc, #48]	; (8000938 <__libc_init_array+0x44>)
 8000908:	f000 f818 	bl	800093c <_init>
 800090c:	1b64      	subs	r4, r4, r5
 800090e:	10a4      	asrs	r4, r4, #2
 8000910:	2600      	movs	r6, #0
 8000912:	42a6      	cmp	r6, r4
 8000914:	d105      	bne.n	8000922 <__libc_init_array+0x2e>
 8000916:	bd70      	pop	{r4, r5, r6, pc}
 8000918:	f855 3b04 	ldr.w	r3, [r5], #4
 800091c:	4798      	blx	r3
 800091e:	3601      	adds	r6, #1
 8000920:	e7ee      	b.n	8000900 <__libc_init_array+0xc>
 8000922:	f855 3b04 	ldr.w	r3, [r5], #4
 8000926:	4798      	blx	r3
 8000928:	3601      	adds	r6, #1
 800092a:	e7f2      	b.n	8000912 <__libc_init_array+0x1e>
 800092c:	08000954 	.word	0x08000954
 8000930:	08000954 	.word	0x08000954
 8000934:	08000954 	.word	0x08000954
 8000938:	08000958 	.word	0x08000958

0800093c <_init>:
 800093c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800093e:	bf00      	nop
 8000940:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000942:	bc08      	pop	{r3}
 8000944:	469e      	mov	lr, r3
 8000946:	4770      	bx	lr

08000948 <_fini>:
 8000948:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800094a:	bf00      	nop
 800094c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800094e:	bc08      	pop	{r3}
 8000950:	469e      	mov	lr, r3
 8000952:	4770      	bx	lr
