
221026_stm32f411_drivers_7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000b74  08000198  08000198  00010198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000d0c  08000d0c  00020018  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000d0c  08000d0c  00020018  2**0
                  CONTENTS
  4 .ARM          00000000  08000d0c  08000d0c  00020018  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000d0c  08000d0c  00020018  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000d0c  08000d0c  00010d0c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000d10  08000d10  00010d10  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000018  20000000  08000d14  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000044  20000018  08000d2c  00020018  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000005c  08000d2c  0002005c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020018  2**0
                  CONTENTS, READONLY
 12 .debug_info   00001b90  00000000  00000000  00020048  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000664  00000000  00000000  00021bd8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000001f0  00000000  00000000  00022240  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000001a8  00000000  00000000  00022430  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00002d9c  00000000  00000000  000225d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00002293  00000000  00000000  00025374  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0000ab59  00000000  00000000  00027607  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00032160  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000724  00000000  00000000  000321b0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000018 	.word	0x20000018
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08000cf4 	.word	0x08000cf4

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	2000001c 	.word	0x2000001c
 80001d4:	08000cf4 	.word	0x08000cf4

080001d8 <strlen>:
 80001d8:	4603      	mov	r3, r0
 80001da:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001de:	2a00      	cmp	r2, #0
 80001e0:	d1fb      	bne.n	80001da <strlen+0x2>
 80001e2:	1a18      	subs	r0, r3, r0
 80001e4:	3801      	subs	r0, #1
 80001e6:	4770      	bx	lr

080001e8 <delay>:
#define MY_ADDR 0x61;

#define SLAVE_ADDR  0x68

void delay(void)
{
 80001e8:	b480      	push	{r7}
 80001ea:	b083      	sub	sp, #12
 80001ec:	af00      	add	r7, sp, #0
	for(uint32_t i = 0 ; i < 500000/2 ; i ++);
 80001ee:	2300      	movs	r3, #0
 80001f0:	607b      	str	r3, [r7, #4]
 80001f2:	e002      	b.n	80001fa <delay+0x12>
 80001f4:	687b      	ldr	r3, [r7, #4]
 80001f6:	3301      	adds	r3, #1
 80001f8:	607b      	str	r3, [r7, #4]
 80001fa:	687b      	ldr	r3, [r7, #4]
 80001fc:	4a04      	ldr	r2, [pc, #16]	; (8000210 <delay+0x28>)
 80001fe:	4293      	cmp	r3, r2
 8000200:	d9f8      	bls.n	80001f4 <delay+0xc>
}
 8000202:	bf00      	nop
 8000204:	bf00      	nop
 8000206:	370c      	adds	r7, #12
 8000208:	46bd      	mov	sp, r7
 800020a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800020e:	4770      	bx	lr
 8000210:	0003d08f 	.word	0x0003d08f

08000214 <I2C1_GPIOInits>:
 * PB6-> SCL
 * PB9 or PB7 -> SDA
 */

void I2C1_GPIOInits(void)
{
 8000214:	b580      	push	{r7, lr}
 8000216:	b084      	sub	sp, #16
 8000218:	af00      	add	r7, sp, #0

	/*Note : Internal pull-up resistors are used */

	//struct . and -> difference?? :

	I2CPins.pGPIOx = GPIOB; // +
 800021a:	4b0e      	ldr	r3, [pc, #56]	; (8000254 <I2C1_GPIOInits+0x40>)
 800021c:	607b      	str	r3, [r7, #4]
	I2CPins.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_ALTFN;		// choose alternative function mode
 800021e:	2302      	movs	r3, #2
 8000220:	727b      	strb	r3, [r7, #9]
	I2CPins.GPIO_PinConfig.GPIO_PinOPType = GPIO_OP_TYPE_OD;	// choose open-drain mode
 8000222:	2301      	movs	r3, #1
 8000224:	733b      	strb	r3, [r7, #12]
	/*
	 * Note : In the below line use GPIO_NO_PUPD option if you want to use external pullup resistors, then you have to use 3.3K pull up resistors
	 * for both SDA and SCL lines
	 */
	I2CPins.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_PIN_PU;	// Not Need...?
 8000226:	2301      	movs	r3, #1
 8000228:	72fb      	strb	r3, [r7, #11]
	I2CPins.GPIO_PinConfig.GPIO_PinAltFunMode = 4;
 800022a:	2304      	movs	r3, #4
 800022c:	737b      	strb	r3, [r7, #13]
	I2CPins. GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_FAST;
 800022e:	2302      	movs	r3, #2
 8000230:	72bb      	strb	r3, [r7, #10]

	//scl
	I2CPins.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_6;
 8000232:	2306      	movs	r3, #6
 8000234:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&I2CPins);
 8000236:	1d3b      	adds	r3, r7, #4
 8000238:	4618      	mov	r0, r3
 800023a:	f000 f8f3 	bl	8000424 <GPIO_Init>


	//sda
	//Note : since we found a glitch on PB9 , you can also try with PB7
	I2CPins.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_9;
 800023e:	2309      	movs	r3, #9
 8000240:	723b      	strb	r3, [r7, #8]

	GPIO_Init(&I2CPins);
 8000242:	1d3b      	adds	r3, r7, #4
 8000244:	4618      	mov	r0, r3
 8000246:	f000 f8ed 	bl	8000424 <GPIO_Init>

}
 800024a:	bf00      	nop
 800024c:	3710      	adds	r7, #16
 800024e:	46bd      	mov	sp, r7
 8000250:	bd80      	pop	{r7, pc}
 8000252:	bf00      	nop
 8000254:	40020400 	.word	0x40020400

08000258 <I2C1_Inits>:

void I2C1_Inits(void)
{
 8000258:	b580      	push	{r7, lr}
 800025a:	af00      	add	r7, sp, #0
	I2C1Handle.pI2Cx = I2C1;
 800025c:	4b09      	ldr	r3, [pc, #36]	; (8000284 <I2C1_Inits+0x2c>)
 800025e:	4a0a      	ldr	r2, [pc, #40]	; (8000288 <I2C1_Inits+0x30>)
 8000260:	601a      	str	r2, [r3, #0]
	I2C1Handle.I2C_Config.I2C_AckControl = I2C_ACK_ENABLE;
 8000262:	4b08      	ldr	r3, [pc, #32]	; (8000284 <I2C1_Inits+0x2c>)
 8000264:	2201      	movs	r2, #1
 8000266:	725a      	strb	r2, [r3, #9]
	I2C1Handle.I2C_Config.I2C_DeviceAddress = MY_ADDR;
 8000268:	4b06      	ldr	r3, [pc, #24]	; (8000284 <I2C1_Inits+0x2c>)
 800026a:	2261      	movs	r2, #97	; 0x61
 800026c:	721a      	strb	r2, [r3, #8]
	I2C1Handle.I2C_Config.I2C_FMDutyCycle = I2C_FM_DUTY_2;
 800026e:	4b05      	ldr	r3, [pc, #20]	; (8000284 <I2C1_Inits+0x2c>)
 8000270:	2200      	movs	r2, #0
 8000272:	729a      	strb	r2, [r3, #10]
	I2C1Handle.I2C_Config.I2C_SCLSpeed = I2C_SCL_SPEED_SM;
 8000274:	4b03      	ldr	r3, [pc, #12]	; (8000284 <I2C1_Inits+0x2c>)
 8000276:	4a05      	ldr	r2, [pc, #20]	; (800028c <I2C1_Inits+0x34>)
 8000278:	605a      	str	r2, [r3, #4]

	I2C_Init(&I2C1Handle);
 800027a:	4802      	ldr	r0, [pc, #8]	; (8000284 <I2C1_Inits+0x2c>)
 800027c:	f000 fb46 	bl	800090c <I2C_Init>

}
 8000280:	bf00      	nop
 8000282:	bd80      	pop	{r7, pc}
 8000284:	20000034 	.word	0x20000034
 8000288:	40005400 	.word	0x40005400
 800028c:	000186a0 	.word	0x000186a0

08000290 <GPIO_ButtonInit>:

void GPIO_ButtonInit(void)
{
 8000290:	b580      	push	{r7, lr}
 8000292:	b084      	sub	sp, #16
 8000294:	af00      	add	r7, sp, #0
	GPIO_Handle_t GPIOBtn;

	//this is btn gpio configuration
	GPIOBtn.pGPIOx = GPIOC;
 8000296:	4b09      	ldr	r3, [pc, #36]	; (80002bc <GPIO_ButtonInit+0x2c>)
 8000298:	607b      	str	r3, [r7, #4]
	GPIOBtn.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_13;
 800029a:	230d      	movs	r3, #13
 800029c:	723b      	strb	r3, [r7, #8]
	GPIOBtn.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_IN;
 800029e:	2300      	movs	r3, #0
 80002a0:	727b      	strb	r3, [r7, #9]
	GPIOBtn.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_FAST;
 80002a2:	2302      	movs	r3, #2
 80002a4:	72bb      	strb	r3, [r7, #10]
	GPIOBtn.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_NO_PUPD;
 80002a6:	2300      	movs	r3, #0
 80002a8:	72fb      	strb	r3, [r7, #11]

	GPIO_Init(&GPIOBtn);
 80002aa:	1d3b      	adds	r3, r7, #4
 80002ac:	4618      	mov	r0, r3
 80002ae:	f000 f8b9 	bl	8000424 <GPIO_Init>
}
 80002b2:	bf00      	nop
 80002b4:	3710      	adds	r7, #16
 80002b6:	46bd      	mov	sp, r7
 80002b8:	bd80      	pop	{r7, pc}
 80002ba:	bf00      	nop
 80002bc:	40020800 	.word	0x40020800

080002c0 <main>:


int main(void)
{
 80002c0:	b580      	push	{r7, lr}
 80002c2:	b082      	sub	sp, #8
 80002c4:	af02      	add	r7, sp, #8

	GPIO_ButtonInit();
 80002c6:	f7ff ffe3 	bl	8000290 <GPIO_ButtonInit>
	//i2c pin inits
	I2C1_GPIOInits();
 80002ca:	f7ff ffa3 	bl	8000214 <I2C1_GPIOInits>
	//i2c peripheral configuration
	I2C1_Inits();
 80002ce:	f7ff ffc3 	bl	8000258 <I2C1_Inits>
	//enable the i2c peripheral
	I2C_PeripheralControl(I2C1,ENABLE);
 80002d2:	2101      	movs	r1, #1
 80002d4:	480c      	ldr	r0, [pc, #48]	; (8000308 <main+0x48>)
 80002d6:	f000 fac4 	bl	8000862 <I2C_PeripheralControl>

	while(1)
	{
		//wait till button is pressed
		while( /*!*/ GPIO_ReadFromInputPin(GPIOC,GPIO_PIN_NO_13) );
 80002da:	bf00      	nop
 80002dc:	210d      	movs	r1, #13
 80002de:	480b      	ldr	r0, [pc, #44]	; (800030c <main+0x4c>)
 80002e0:	f000 fa3c 	bl	800075c <GPIO_ReadFromInputPin>
 80002e4:	4603      	mov	r3, r0
 80002e6:	2b00      	cmp	r3, #0
 80002e8:	d1f8      	bne.n	80002dc <main+0x1c>
		//to avoid button de-bouncing related issues 200ms of delay
		delay();
 80002ea:	f7ff ff7d 	bl	80001e8 <delay>
		//send some data to the slave
		I2C_MasterSendData(&I2C1Handle,some_data,strlen((char*)some_data),SLAVE_ADDR,0);
 80002ee:	4808      	ldr	r0, [pc, #32]	; (8000310 <main+0x50>)
 80002f0:	f7ff ff72 	bl	80001d8 <strlen>
 80002f4:	4602      	mov	r2, r0
 80002f6:	2300      	movs	r3, #0
 80002f8:	9300      	str	r3, [sp, #0]
 80002fa:	2368      	movs	r3, #104	; 0x68
 80002fc:	4904      	ldr	r1, [pc, #16]	; (8000310 <main+0x50>)
 80002fe:	4805      	ldr	r0, [pc, #20]	; (8000314 <main+0x54>)
 8000300:	f000 fbca 	bl	8000a98 <I2C_MasterSendData>
		while( /*!*/ GPIO_ReadFromInputPin(GPIOC,GPIO_PIN_NO_13) );
 8000304:	e7e9      	b.n	80002da <main+0x1a>
 8000306:	bf00      	nop
 8000308:	40005400 	.word	0x40005400
 800030c:	40020800 	.word	0x40020800
 8000310:	20000000 	.word	0x20000000
 8000314:	20000034 	.word	0x20000034

08000318 <GPIO_PeriClockControl>:
 *
 * @Note              -  none

 */
void GPIO_PeriClockControl(GPIO_RegDef_t *pGPIOx, uint8_t EnorDi)
{
 8000318:	b480      	push	{r7}
 800031a:	b083      	sub	sp, #12
 800031c:	af00      	add	r7, sp, #0
 800031e:	6078      	str	r0, [r7, #4]
 8000320:	460b      	mov	r3, r1
 8000322:	70fb      	strb	r3, [r7, #3]
	if(EnorDi == ENABLE)
 8000324:	78fb      	ldrb	r3, [r7, #3]
 8000326:	2b01      	cmp	r3, #1
 8000328:	d161      	bne.n	80003ee <GPIO_PeriClockControl+0xd6>
	{
		if(pGPIOx == GPIOA)
 800032a:	687b      	ldr	r3, [r7, #4]
 800032c:	4a33      	ldr	r2, [pc, #204]	; (80003fc <GPIO_PeriClockControl+0xe4>)
 800032e:	4293      	cmp	r3, r2
 8000330:	d106      	bne.n	8000340 <GPIO_PeriClockControl+0x28>
		{
			GPIOA_PCLK_EN();
 8000332:	4b33      	ldr	r3, [pc, #204]	; (8000400 <GPIO_PeriClockControl+0xe8>)
 8000334:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000336:	4a32      	ldr	r2, [pc, #200]	; (8000400 <GPIO_PeriClockControl+0xe8>)
 8000338:	f043 0301 	orr.w	r3, r3, #1
 800033c:	6313      	str	r3, [r2, #48]	; 0x30
	else
	{
		//TODO
	}

}
 800033e:	e056      	b.n	80003ee <GPIO_PeriClockControl+0xd6>
		}else if (pGPIOx == GPIOB)
 8000340:	687b      	ldr	r3, [r7, #4]
 8000342:	4a30      	ldr	r2, [pc, #192]	; (8000404 <GPIO_PeriClockControl+0xec>)
 8000344:	4293      	cmp	r3, r2
 8000346:	d106      	bne.n	8000356 <GPIO_PeriClockControl+0x3e>
			GPIOB_PCLK_EN();
 8000348:	4b2d      	ldr	r3, [pc, #180]	; (8000400 <GPIO_PeriClockControl+0xe8>)
 800034a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800034c:	4a2c      	ldr	r2, [pc, #176]	; (8000400 <GPIO_PeriClockControl+0xe8>)
 800034e:	f043 0302 	orr.w	r3, r3, #2
 8000352:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000354:	e04b      	b.n	80003ee <GPIO_PeriClockControl+0xd6>
		}else if (pGPIOx == GPIOC)
 8000356:	687b      	ldr	r3, [r7, #4]
 8000358:	4a2b      	ldr	r2, [pc, #172]	; (8000408 <GPIO_PeriClockControl+0xf0>)
 800035a:	4293      	cmp	r3, r2
 800035c:	d106      	bne.n	800036c <GPIO_PeriClockControl+0x54>
			GPIOC_PCLK_EN();
 800035e:	4b28      	ldr	r3, [pc, #160]	; (8000400 <GPIO_PeriClockControl+0xe8>)
 8000360:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000362:	4a27      	ldr	r2, [pc, #156]	; (8000400 <GPIO_PeriClockControl+0xe8>)
 8000364:	f043 0304 	orr.w	r3, r3, #4
 8000368:	6313      	str	r3, [r2, #48]	; 0x30
}
 800036a:	e040      	b.n	80003ee <GPIO_PeriClockControl+0xd6>
		}else if (pGPIOx == GPIOD)
 800036c:	687b      	ldr	r3, [r7, #4]
 800036e:	4a27      	ldr	r2, [pc, #156]	; (800040c <GPIO_PeriClockControl+0xf4>)
 8000370:	4293      	cmp	r3, r2
 8000372:	d106      	bne.n	8000382 <GPIO_PeriClockControl+0x6a>
			GPIOD_PCLK_EN();
 8000374:	4b22      	ldr	r3, [pc, #136]	; (8000400 <GPIO_PeriClockControl+0xe8>)
 8000376:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000378:	4a21      	ldr	r2, [pc, #132]	; (8000400 <GPIO_PeriClockControl+0xe8>)
 800037a:	f043 0308 	orr.w	r3, r3, #8
 800037e:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000380:	e035      	b.n	80003ee <GPIO_PeriClockControl+0xd6>
		}else if (pGPIOx == GPIOE)
 8000382:	687b      	ldr	r3, [r7, #4]
 8000384:	4a22      	ldr	r2, [pc, #136]	; (8000410 <GPIO_PeriClockControl+0xf8>)
 8000386:	4293      	cmp	r3, r2
 8000388:	d106      	bne.n	8000398 <GPIO_PeriClockControl+0x80>
			GPIOE_PCLK_EN();
 800038a:	4b1d      	ldr	r3, [pc, #116]	; (8000400 <GPIO_PeriClockControl+0xe8>)
 800038c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800038e:	4a1c      	ldr	r2, [pc, #112]	; (8000400 <GPIO_PeriClockControl+0xe8>)
 8000390:	f043 0310 	orr.w	r3, r3, #16
 8000394:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000396:	e02a      	b.n	80003ee <GPIO_PeriClockControl+0xd6>
		}else if (pGPIOx == GPIOF)
 8000398:	687b      	ldr	r3, [r7, #4]
 800039a:	4a1e      	ldr	r2, [pc, #120]	; (8000414 <GPIO_PeriClockControl+0xfc>)
 800039c:	4293      	cmp	r3, r2
 800039e:	d106      	bne.n	80003ae <GPIO_PeriClockControl+0x96>
			GPIOF_PCLK_EN();
 80003a0:	4b17      	ldr	r3, [pc, #92]	; (8000400 <GPIO_PeriClockControl+0xe8>)
 80003a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80003a4:	4a16      	ldr	r2, [pc, #88]	; (8000400 <GPIO_PeriClockControl+0xe8>)
 80003a6:	f043 0320 	orr.w	r3, r3, #32
 80003aa:	6313      	str	r3, [r2, #48]	; 0x30
}
 80003ac:	e01f      	b.n	80003ee <GPIO_PeriClockControl+0xd6>
		}else if (pGPIOx == GPIOG)
 80003ae:	687b      	ldr	r3, [r7, #4]
 80003b0:	4a19      	ldr	r2, [pc, #100]	; (8000418 <GPIO_PeriClockControl+0x100>)
 80003b2:	4293      	cmp	r3, r2
 80003b4:	d106      	bne.n	80003c4 <GPIO_PeriClockControl+0xac>
			GPIOG_PCLK_EN();
 80003b6:	4b12      	ldr	r3, [pc, #72]	; (8000400 <GPIO_PeriClockControl+0xe8>)
 80003b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80003ba:	4a11      	ldr	r2, [pc, #68]	; (8000400 <GPIO_PeriClockControl+0xe8>)
 80003bc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80003c0:	6313      	str	r3, [r2, #48]	; 0x30
}
 80003c2:	e014      	b.n	80003ee <GPIO_PeriClockControl+0xd6>
		}else if (pGPIOx == GPIOH)
 80003c4:	687b      	ldr	r3, [r7, #4]
 80003c6:	4a15      	ldr	r2, [pc, #84]	; (800041c <GPIO_PeriClockControl+0x104>)
 80003c8:	4293      	cmp	r3, r2
 80003ca:	d106      	bne.n	80003da <GPIO_PeriClockControl+0xc2>
			GPIOH_PCLK_EN();
 80003cc:	4b0c      	ldr	r3, [pc, #48]	; (8000400 <GPIO_PeriClockControl+0xe8>)
 80003ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80003d0:	4a0b      	ldr	r2, [pc, #44]	; (8000400 <GPIO_PeriClockControl+0xe8>)
 80003d2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80003d6:	6313      	str	r3, [r2, #48]	; 0x30
}
 80003d8:	e009      	b.n	80003ee <GPIO_PeriClockControl+0xd6>
		}else if (pGPIOx == GPIOI)
 80003da:	687b      	ldr	r3, [r7, #4]
 80003dc:	4a10      	ldr	r2, [pc, #64]	; (8000420 <GPIO_PeriClockControl+0x108>)
 80003de:	4293      	cmp	r3, r2
 80003e0:	d105      	bne.n	80003ee <GPIO_PeriClockControl+0xd6>
			GPIOI_PCLK_EN();
 80003e2:	4b07      	ldr	r3, [pc, #28]	; (8000400 <GPIO_PeriClockControl+0xe8>)
 80003e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80003e6:	4a06      	ldr	r2, [pc, #24]	; (8000400 <GPIO_PeriClockControl+0xe8>)
 80003e8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80003ec:	6313      	str	r3, [r2, #48]	; 0x30
}
 80003ee:	bf00      	nop
 80003f0:	370c      	adds	r7, #12
 80003f2:	46bd      	mov	sp, r7
 80003f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003f8:	4770      	bx	lr
 80003fa:	bf00      	nop
 80003fc:	40020000 	.word	0x40020000
 8000400:	40023800 	.word	0x40023800
 8000404:	40020400 	.word	0x40020400
 8000408:	40020800 	.word	0x40020800
 800040c:	40020c00 	.word	0x40020c00
 8000410:	40021000 	.word	0x40021000
 8000414:	40021400 	.word	0x40021400
 8000418:	40021800 	.word	0x40021800
 800041c:	40021c00 	.word	0x40021c00
 8000420:	40022000 	.word	0x40022000

08000424 <GPIO_Init>:
 *
 * @Note              -

 */
void GPIO_Init(GPIO_Handle_t *pGPIOHandle)
{
 8000424:	b580      	push	{r7, lr}
 8000426:	b086      	sub	sp, #24
 8000428:	af00      	add	r7, sp, #0
 800042a:	6078      	str	r0, [r7, #4]
	 uint32_t temp=0; //temp. register
 800042c:	2300      	movs	r3, #0
 800042e:	617b      	str	r3, [r7, #20]

	 //enable the peripheral clock

	 GPIO_PeriClockControl(pGPIOHandle->pGPIOx, ENABLE);
 8000430:	687b      	ldr	r3, [r7, #4]
 8000432:	681b      	ldr	r3, [r3, #0]
 8000434:	2101      	movs	r1, #1
 8000436:	4618      	mov	r0, r3
 8000438:	f7ff ff6e 	bl	8000318 <GPIO_PeriClockControl>

	//1 . configure the mode of gpio pin

	if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode <= GPIO_MODE_ANALOG)
 800043c:	687b      	ldr	r3, [r7, #4]
 800043e:	795b      	ldrb	r3, [r3, #5]
 8000440:	2b03      	cmp	r3, #3
 8000442:	d820      	bhi.n	8000486 <GPIO_Init+0x62>
	{
		//the non interrupt mode
		temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber ) );
 8000444:	687b      	ldr	r3, [r7, #4]
 8000446:	795b      	ldrb	r3, [r3, #5]
 8000448:	461a      	mov	r2, r3
 800044a:	687b      	ldr	r3, [r7, #4]
 800044c:	791b      	ldrb	r3, [r3, #4]
 800044e:	005b      	lsls	r3, r3, #1
 8000450:	fa02 f303 	lsl.w	r3, r2, r3
 8000454:	617b      	str	r3, [r7, #20]
		pGPIOHandle->pGPIOx->MODER &= ~( 0x3 << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber)); //clearing
 8000456:	687b      	ldr	r3, [r7, #4]
 8000458:	681b      	ldr	r3, [r3, #0]
 800045a:	681a      	ldr	r2, [r3, #0]
 800045c:	687b      	ldr	r3, [r7, #4]
 800045e:	791b      	ldrb	r3, [r3, #4]
 8000460:	005b      	lsls	r3, r3, #1
 8000462:	2103      	movs	r1, #3
 8000464:	fa01 f303 	lsl.w	r3, r1, r3
 8000468:	43db      	mvns	r3, r3
 800046a:	4619      	mov	r1, r3
 800046c:	687b      	ldr	r3, [r7, #4]
 800046e:	681b      	ldr	r3, [r3, #0]
 8000470:	400a      	ands	r2, r1
 8000472:	601a      	str	r2, [r3, #0]
		pGPIOHandle->pGPIOx->MODER |= temp; //setting
 8000474:	687b      	ldr	r3, [r7, #4]
 8000476:	681b      	ldr	r3, [r3, #0]
 8000478:	6819      	ldr	r1, [r3, #0]
 800047a:	687b      	ldr	r3, [r7, #4]
 800047c:	681b      	ldr	r3, [r3, #0]
 800047e:	697a      	ldr	r2, [r7, #20]
 8000480:	430a      	orrs	r2, r1
 8000482:	601a      	str	r2, [r3, #0]
 8000484:	e0cb      	b.n	800061e <GPIO_Init+0x1fa>

	}else
	{
		//this part will code later . ( interrupt mode)
		if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode ==GPIO_MODE_IT_FT )
 8000486:	687b      	ldr	r3, [r7, #4]
 8000488:	795b      	ldrb	r3, [r3, #5]
 800048a:	2b04      	cmp	r3, #4
 800048c:	d117      	bne.n	80004be <GPIO_Init+0x9a>
		{
			//1. configure the FTSR
			EXTI->FTSR |= ( 1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 800048e:	4b4b      	ldr	r3, [pc, #300]	; (80005bc <GPIO_Init+0x198>)
 8000490:	68db      	ldr	r3, [r3, #12]
 8000492:	687a      	ldr	r2, [r7, #4]
 8000494:	7912      	ldrb	r2, [r2, #4]
 8000496:	4611      	mov	r1, r2
 8000498:	2201      	movs	r2, #1
 800049a:	408a      	lsls	r2, r1
 800049c:	4611      	mov	r1, r2
 800049e:	4a47      	ldr	r2, [pc, #284]	; (80005bc <GPIO_Init+0x198>)
 80004a0:	430b      	orrs	r3, r1
 80004a2:	60d3      	str	r3, [r2, #12]
			//Clear the corresponding RTSR bit
			EXTI->RTSR &= ~( 1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80004a4:	4b45      	ldr	r3, [pc, #276]	; (80005bc <GPIO_Init+0x198>)
 80004a6:	689b      	ldr	r3, [r3, #8]
 80004a8:	687a      	ldr	r2, [r7, #4]
 80004aa:	7912      	ldrb	r2, [r2, #4]
 80004ac:	4611      	mov	r1, r2
 80004ae:	2201      	movs	r2, #1
 80004b0:	408a      	lsls	r2, r1
 80004b2:	43d2      	mvns	r2, r2
 80004b4:	4611      	mov	r1, r2
 80004b6:	4a41      	ldr	r2, [pc, #260]	; (80005bc <GPIO_Init+0x198>)
 80004b8:	400b      	ands	r3, r1
 80004ba:	6093      	str	r3, [r2, #8]
 80004bc:	e035      	b.n	800052a <GPIO_Init+0x106>

		}else if (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode ==GPIO_MODE_IT_RT )
 80004be:	687b      	ldr	r3, [r7, #4]
 80004c0:	795b      	ldrb	r3, [r3, #5]
 80004c2:	2b05      	cmp	r3, #5
 80004c4:	d117      	bne.n	80004f6 <GPIO_Init+0xd2>
		{
			//1 . configure the RTSR
			EXTI->RTSR |= ( 1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80004c6:	4b3d      	ldr	r3, [pc, #244]	; (80005bc <GPIO_Init+0x198>)
 80004c8:	689b      	ldr	r3, [r3, #8]
 80004ca:	687a      	ldr	r2, [r7, #4]
 80004cc:	7912      	ldrb	r2, [r2, #4]
 80004ce:	4611      	mov	r1, r2
 80004d0:	2201      	movs	r2, #1
 80004d2:	408a      	lsls	r2, r1
 80004d4:	4611      	mov	r1, r2
 80004d6:	4a39      	ldr	r2, [pc, #228]	; (80005bc <GPIO_Init+0x198>)
 80004d8:	430b      	orrs	r3, r1
 80004da:	6093      	str	r3, [r2, #8]
			//Clear the corresponding RTSR bit
			EXTI->FTSR &= ~( 1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80004dc:	4b37      	ldr	r3, [pc, #220]	; (80005bc <GPIO_Init+0x198>)
 80004de:	68db      	ldr	r3, [r3, #12]
 80004e0:	687a      	ldr	r2, [r7, #4]
 80004e2:	7912      	ldrb	r2, [r2, #4]
 80004e4:	4611      	mov	r1, r2
 80004e6:	2201      	movs	r2, #1
 80004e8:	408a      	lsls	r2, r1
 80004ea:	43d2      	mvns	r2, r2
 80004ec:	4611      	mov	r1, r2
 80004ee:	4a33      	ldr	r2, [pc, #204]	; (80005bc <GPIO_Init+0x198>)
 80004f0:	400b      	ands	r3, r1
 80004f2:	60d3      	str	r3, [r2, #12]
 80004f4:	e019      	b.n	800052a <GPIO_Init+0x106>

		}else if (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_RFT )
 80004f6:	687b      	ldr	r3, [r7, #4]
 80004f8:	795b      	ldrb	r3, [r3, #5]
 80004fa:	2b06      	cmp	r3, #6
 80004fc:	d115      	bne.n	800052a <GPIO_Init+0x106>
		{
			//1. configure both FTSR and RTSR
			EXTI->RTSR |= ( 1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80004fe:	4b2f      	ldr	r3, [pc, #188]	; (80005bc <GPIO_Init+0x198>)
 8000500:	689b      	ldr	r3, [r3, #8]
 8000502:	687a      	ldr	r2, [r7, #4]
 8000504:	7912      	ldrb	r2, [r2, #4]
 8000506:	4611      	mov	r1, r2
 8000508:	2201      	movs	r2, #1
 800050a:	408a      	lsls	r2, r1
 800050c:	4611      	mov	r1, r2
 800050e:	4a2b      	ldr	r2, [pc, #172]	; (80005bc <GPIO_Init+0x198>)
 8000510:	430b      	orrs	r3, r1
 8000512:	6093      	str	r3, [r2, #8]
			//Clear the corresponding RTSR bit
			EXTI->FTSR |= ( 1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000514:	4b29      	ldr	r3, [pc, #164]	; (80005bc <GPIO_Init+0x198>)
 8000516:	68db      	ldr	r3, [r3, #12]
 8000518:	687a      	ldr	r2, [r7, #4]
 800051a:	7912      	ldrb	r2, [r2, #4]
 800051c:	4611      	mov	r1, r2
 800051e:	2201      	movs	r2, #1
 8000520:	408a      	lsls	r2, r1
 8000522:	4611      	mov	r1, r2
 8000524:	4a25      	ldr	r2, [pc, #148]	; (80005bc <GPIO_Init+0x198>)
 8000526:	430b      	orrs	r3, r1
 8000528:	60d3      	str	r3, [r2, #12]
		}

		//2. configure the GPIO port selection in SYSCFG_EXTICR
		uint8_t temp1 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber / 4 ;
 800052a:	687b      	ldr	r3, [r7, #4]
 800052c:	791b      	ldrb	r3, [r3, #4]
 800052e:	089b      	lsrs	r3, r3, #2
 8000530:	74fb      	strb	r3, [r7, #19]
		uint8_t temp2 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber % 4;
 8000532:	687b      	ldr	r3, [r7, #4]
 8000534:	791b      	ldrb	r3, [r3, #4]
 8000536:	f003 0303 	and.w	r3, r3, #3
 800053a:	74bb      	strb	r3, [r7, #18]
		uint8_t portcode = GPIO_BASEADDR_TO_CODE(pGPIOHandle->pGPIOx);
 800053c:	687b      	ldr	r3, [r7, #4]
 800053e:	681b      	ldr	r3, [r3, #0]
 8000540:	4a1f      	ldr	r2, [pc, #124]	; (80005c0 <GPIO_Init+0x19c>)
 8000542:	4293      	cmp	r3, r2
 8000544:	d04e      	beq.n	80005e4 <GPIO_Init+0x1c0>
 8000546:	687b      	ldr	r3, [r7, #4]
 8000548:	681b      	ldr	r3, [r3, #0]
 800054a:	4a1e      	ldr	r2, [pc, #120]	; (80005c4 <GPIO_Init+0x1a0>)
 800054c:	4293      	cmp	r3, r2
 800054e:	d032      	beq.n	80005b6 <GPIO_Init+0x192>
 8000550:	687b      	ldr	r3, [r7, #4]
 8000552:	681b      	ldr	r3, [r3, #0]
 8000554:	4a1c      	ldr	r2, [pc, #112]	; (80005c8 <GPIO_Init+0x1a4>)
 8000556:	4293      	cmp	r3, r2
 8000558:	d02b      	beq.n	80005b2 <GPIO_Init+0x18e>
 800055a:	687b      	ldr	r3, [r7, #4]
 800055c:	681b      	ldr	r3, [r3, #0]
 800055e:	4a1b      	ldr	r2, [pc, #108]	; (80005cc <GPIO_Init+0x1a8>)
 8000560:	4293      	cmp	r3, r2
 8000562:	d024      	beq.n	80005ae <GPIO_Init+0x18a>
 8000564:	687b      	ldr	r3, [r7, #4]
 8000566:	681b      	ldr	r3, [r3, #0]
 8000568:	4a19      	ldr	r2, [pc, #100]	; (80005d0 <GPIO_Init+0x1ac>)
 800056a:	4293      	cmp	r3, r2
 800056c:	d01d      	beq.n	80005aa <GPIO_Init+0x186>
 800056e:	687b      	ldr	r3, [r7, #4]
 8000570:	681b      	ldr	r3, [r3, #0]
 8000572:	4a18      	ldr	r2, [pc, #96]	; (80005d4 <GPIO_Init+0x1b0>)
 8000574:	4293      	cmp	r3, r2
 8000576:	d016      	beq.n	80005a6 <GPIO_Init+0x182>
 8000578:	687b      	ldr	r3, [r7, #4]
 800057a:	681b      	ldr	r3, [r3, #0]
 800057c:	4a16      	ldr	r2, [pc, #88]	; (80005d8 <GPIO_Init+0x1b4>)
 800057e:	4293      	cmp	r3, r2
 8000580:	d00f      	beq.n	80005a2 <GPIO_Init+0x17e>
 8000582:	687b      	ldr	r3, [r7, #4]
 8000584:	681b      	ldr	r3, [r3, #0]
 8000586:	4a15      	ldr	r2, [pc, #84]	; (80005dc <GPIO_Init+0x1b8>)
 8000588:	4293      	cmp	r3, r2
 800058a:	d008      	beq.n	800059e <GPIO_Init+0x17a>
 800058c:	687b      	ldr	r3, [r7, #4]
 800058e:	681b      	ldr	r3, [r3, #0]
 8000590:	4a13      	ldr	r2, [pc, #76]	; (80005e0 <GPIO_Init+0x1bc>)
 8000592:	4293      	cmp	r3, r2
 8000594:	d101      	bne.n	800059a <GPIO_Init+0x176>
 8000596:	2308      	movs	r3, #8
 8000598:	e025      	b.n	80005e6 <GPIO_Init+0x1c2>
 800059a:	2300      	movs	r3, #0
 800059c:	e023      	b.n	80005e6 <GPIO_Init+0x1c2>
 800059e:	2307      	movs	r3, #7
 80005a0:	e021      	b.n	80005e6 <GPIO_Init+0x1c2>
 80005a2:	2306      	movs	r3, #6
 80005a4:	e01f      	b.n	80005e6 <GPIO_Init+0x1c2>
 80005a6:	2305      	movs	r3, #5
 80005a8:	e01d      	b.n	80005e6 <GPIO_Init+0x1c2>
 80005aa:	2304      	movs	r3, #4
 80005ac:	e01b      	b.n	80005e6 <GPIO_Init+0x1c2>
 80005ae:	2303      	movs	r3, #3
 80005b0:	e019      	b.n	80005e6 <GPIO_Init+0x1c2>
 80005b2:	2302      	movs	r3, #2
 80005b4:	e017      	b.n	80005e6 <GPIO_Init+0x1c2>
 80005b6:	2301      	movs	r3, #1
 80005b8:	e015      	b.n	80005e6 <GPIO_Init+0x1c2>
 80005ba:	bf00      	nop
 80005bc:	40013c00 	.word	0x40013c00
 80005c0:	40020000 	.word	0x40020000
 80005c4:	40020400 	.word	0x40020400
 80005c8:	40020800 	.word	0x40020800
 80005cc:	40020c00 	.word	0x40020c00
 80005d0:	40021000 	.word	0x40021000
 80005d4:	40021400 	.word	0x40021400
 80005d8:	40021800 	.word	0x40021800
 80005dc:	40021c00 	.word	0x40021c00
 80005e0:	40022000 	.word	0x40022000
 80005e4:	2300      	movs	r3, #0
 80005e6:	747b      	strb	r3, [r7, #17]
		SYSCFG_PCLK_EN();
 80005e8:	4b59      	ldr	r3, [pc, #356]	; (8000750 <GPIO_Init+0x32c>)
 80005ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80005ec:	4a58      	ldr	r2, [pc, #352]	; (8000750 <GPIO_Init+0x32c>)
 80005ee:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80005f2:	6453      	str	r3, [r2, #68]	; 0x44
		SYSCFG->EXTICR[temp1] = portcode << ( temp2 * 4);
 80005f4:	7c7a      	ldrb	r2, [r7, #17]
 80005f6:	7cbb      	ldrb	r3, [r7, #18]
 80005f8:	009b      	lsls	r3, r3, #2
 80005fa:	fa02 f103 	lsl.w	r1, r2, r3
 80005fe:	4a55      	ldr	r2, [pc, #340]	; (8000754 <GPIO_Init+0x330>)
 8000600:	7cfb      	ldrb	r3, [r7, #19]
 8000602:	3302      	adds	r3, #2
 8000604:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

		//3 . enable the exti interrupt delivery using IMR
		EXTI->IMR |= 1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber;
 8000608:	4b53      	ldr	r3, [pc, #332]	; (8000758 <GPIO_Init+0x334>)
 800060a:	681b      	ldr	r3, [r3, #0]
 800060c:	687a      	ldr	r2, [r7, #4]
 800060e:	7912      	ldrb	r2, [r2, #4]
 8000610:	4611      	mov	r1, r2
 8000612:	2201      	movs	r2, #1
 8000614:	408a      	lsls	r2, r1
 8000616:	4611      	mov	r1, r2
 8000618:	4a4f      	ldr	r2, [pc, #316]	; (8000758 <GPIO_Init+0x334>)
 800061a:	430b      	orrs	r3, r1
 800061c:	6013      	str	r3, [r2, #0]
	}

	//2. configure the speed
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinSpeed << ( 2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber) );
 800061e:	687b      	ldr	r3, [r7, #4]
 8000620:	799b      	ldrb	r3, [r3, #6]
 8000622:	461a      	mov	r2, r3
 8000624:	687b      	ldr	r3, [r7, #4]
 8000626:	791b      	ldrb	r3, [r3, #4]
 8000628:	005b      	lsls	r3, r3, #1
 800062a:	fa02 f303 	lsl.w	r3, r2, r3
 800062e:	617b      	str	r3, [r7, #20]
	pGPIOHandle->pGPIOx->OSPEEDR &= ~( 0x3 << ( 2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber)); //clearing
 8000630:	687b      	ldr	r3, [r7, #4]
 8000632:	681b      	ldr	r3, [r3, #0]
 8000634:	689a      	ldr	r2, [r3, #8]
 8000636:	687b      	ldr	r3, [r7, #4]
 8000638:	791b      	ldrb	r3, [r3, #4]
 800063a:	005b      	lsls	r3, r3, #1
 800063c:	2103      	movs	r1, #3
 800063e:	fa01 f303 	lsl.w	r3, r1, r3
 8000642:	43db      	mvns	r3, r3
 8000644:	4619      	mov	r1, r3
 8000646:	687b      	ldr	r3, [r7, #4]
 8000648:	681b      	ldr	r3, [r3, #0]
 800064a:	400a      	ands	r2, r1
 800064c:	609a      	str	r2, [r3, #8]
	pGPIOHandle->pGPIOx->OSPEEDR |= temp;
 800064e:	687b      	ldr	r3, [r7, #4]
 8000650:	681b      	ldr	r3, [r3, #0]
 8000652:	6899      	ldr	r1, [r3, #8]
 8000654:	687b      	ldr	r3, [r7, #4]
 8000656:	681b      	ldr	r3, [r3, #0]
 8000658:	697a      	ldr	r2, [r7, #20]
 800065a:	430a      	orrs	r2, r1
 800065c:	609a      	str	r2, [r3, #8]

	//3. configure the pupd settings
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinPuPdControl << ( 2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber) );
 800065e:	687b      	ldr	r3, [r7, #4]
 8000660:	79db      	ldrb	r3, [r3, #7]
 8000662:	461a      	mov	r2, r3
 8000664:	687b      	ldr	r3, [r7, #4]
 8000666:	791b      	ldrb	r3, [r3, #4]
 8000668:	005b      	lsls	r3, r3, #1
 800066a:	fa02 f303 	lsl.w	r3, r2, r3
 800066e:	617b      	str	r3, [r7, #20]
	pGPIOHandle->pGPIOx->PUPDR &= ~( 0x3 << ( 2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber)); //clearing
 8000670:	687b      	ldr	r3, [r7, #4]
 8000672:	681b      	ldr	r3, [r3, #0]
 8000674:	68da      	ldr	r2, [r3, #12]
 8000676:	687b      	ldr	r3, [r7, #4]
 8000678:	791b      	ldrb	r3, [r3, #4]
 800067a:	005b      	lsls	r3, r3, #1
 800067c:	2103      	movs	r1, #3
 800067e:	fa01 f303 	lsl.w	r3, r1, r3
 8000682:	43db      	mvns	r3, r3
 8000684:	4619      	mov	r1, r3
 8000686:	687b      	ldr	r3, [r7, #4]
 8000688:	681b      	ldr	r3, [r3, #0]
 800068a:	400a      	ands	r2, r1
 800068c:	60da      	str	r2, [r3, #12]
	pGPIOHandle->pGPIOx->PUPDR |= temp;
 800068e:	687b      	ldr	r3, [r7, #4]
 8000690:	681b      	ldr	r3, [r3, #0]
 8000692:	68d9      	ldr	r1, [r3, #12]
 8000694:	687b      	ldr	r3, [r7, #4]
 8000696:	681b      	ldr	r3, [r3, #0]
 8000698:	697a      	ldr	r2, [r7, #20]
 800069a:	430a      	orrs	r2, r1
 800069c:	60da      	str	r2, [r3, #12]


	//4. configure the optype
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinOPType << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber );
 800069e:	687b      	ldr	r3, [r7, #4]
 80006a0:	7a1b      	ldrb	r3, [r3, #8]
 80006a2:	461a      	mov	r2, r3
 80006a4:	687b      	ldr	r3, [r7, #4]
 80006a6:	791b      	ldrb	r3, [r3, #4]
 80006a8:	fa02 f303 	lsl.w	r3, r2, r3
 80006ac:	617b      	str	r3, [r7, #20]
	pGPIOHandle->pGPIOx->OTYPER &= ~( 0x1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber); //clearing
 80006ae:	687b      	ldr	r3, [r7, #4]
 80006b0:	681b      	ldr	r3, [r3, #0]
 80006b2:	685a      	ldr	r2, [r3, #4]
 80006b4:	687b      	ldr	r3, [r7, #4]
 80006b6:	791b      	ldrb	r3, [r3, #4]
 80006b8:	4619      	mov	r1, r3
 80006ba:	2301      	movs	r3, #1
 80006bc:	408b      	lsls	r3, r1
 80006be:	43db      	mvns	r3, r3
 80006c0:	4619      	mov	r1, r3
 80006c2:	687b      	ldr	r3, [r7, #4]
 80006c4:	681b      	ldr	r3, [r3, #0]
 80006c6:	400a      	ands	r2, r1
 80006c8:	605a      	str	r2, [r3, #4]
	pGPIOHandle->pGPIOx->OTYPER |= temp;
 80006ca:	687b      	ldr	r3, [r7, #4]
 80006cc:	681b      	ldr	r3, [r3, #0]
 80006ce:	6859      	ldr	r1, [r3, #4]
 80006d0:	687b      	ldr	r3, [r7, #4]
 80006d2:	681b      	ldr	r3, [r3, #0]
 80006d4:	697a      	ldr	r2, [r7, #20]
 80006d6:	430a      	orrs	r2, r1
 80006d8:	605a      	str	r2, [r3, #4]

	//5. configure the alt functionality
	if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_ALTFN)
 80006da:	687b      	ldr	r3, [r7, #4]
 80006dc:	795b      	ldrb	r3, [r3, #5]
 80006de:	2b02      	cmp	r3, #2
 80006e0:	d131      	bne.n	8000746 <GPIO_Init+0x322>
	{
		//configure the alt function registers.
		uint8_t temp1, temp2;

		temp1 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber / 8;
 80006e2:	687b      	ldr	r3, [r7, #4]
 80006e4:	791b      	ldrb	r3, [r3, #4]
 80006e6:	08db      	lsrs	r3, r3, #3
 80006e8:	743b      	strb	r3, [r7, #16]
		temp2 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber  % 8;
 80006ea:	687b      	ldr	r3, [r7, #4]
 80006ec:	791b      	ldrb	r3, [r3, #4]
 80006ee:	f003 0307 	and.w	r3, r3, #7
 80006f2:	73fb      	strb	r3, [r7, #15]
		pGPIOHandle->pGPIOx->AFR[temp1] &= ~(0xF << ( 4 * temp2 ) ); //clearing
 80006f4:	687b      	ldr	r3, [r7, #4]
 80006f6:	681b      	ldr	r3, [r3, #0]
 80006f8:	7c3a      	ldrb	r2, [r7, #16]
 80006fa:	3208      	adds	r2, #8
 80006fc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8000700:	7bfb      	ldrb	r3, [r7, #15]
 8000702:	009b      	lsls	r3, r3, #2
 8000704:	220f      	movs	r2, #15
 8000706:	fa02 f303 	lsl.w	r3, r2, r3
 800070a:	43db      	mvns	r3, r3
 800070c:	4618      	mov	r0, r3
 800070e:	687b      	ldr	r3, [r7, #4]
 8000710:	681b      	ldr	r3, [r3, #0]
 8000712:	7c3a      	ldrb	r2, [r7, #16]
 8000714:	4001      	ands	r1, r0
 8000716:	3208      	adds	r2, #8
 8000718:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		pGPIOHandle->pGPIOx->AFR[temp1] |= (pGPIOHandle->GPIO_PinConfig.GPIO_PinAltFunMode << ( 4 * temp2 ) );
 800071c:	687b      	ldr	r3, [r7, #4]
 800071e:	681b      	ldr	r3, [r3, #0]
 8000720:	7c3a      	ldrb	r2, [r7, #16]
 8000722:	3208      	adds	r2, #8
 8000724:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8000728:	687b      	ldr	r3, [r7, #4]
 800072a:	7a5b      	ldrb	r3, [r3, #9]
 800072c:	461a      	mov	r2, r3
 800072e:	7bfb      	ldrb	r3, [r7, #15]
 8000730:	009b      	lsls	r3, r3, #2
 8000732:	fa02 f303 	lsl.w	r3, r2, r3
 8000736:	4618      	mov	r0, r3
 8000738:	687b      	ldr	r3, [r7, #4]
 800073a:	681b      	ldr	r3, [r3, #0]
 800073c:	7c3a      	ldrb	r2, [r7, #16]
 800073e:	4301      	orrs	r1, r0
 8000740:	3208      	adds	r2, #8
 8000742:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	}

}
 8000746:	bf00      	nop
 8000748:	3718      	adds	r7, #24
 800074a:	46bd      	mov	sp, r7
 800074c:	bd80      	pop	{r7, pc}
 800074e:	bf00      	nop
 8000750:	40023800 	.word	0x40023800
 8000754:	40013800 	.word	0x40013800
 8000758:	40013c00 	.word	0x40013c00

0800075c <GPIO_ReadFromInputPin>:
 *
 * @Note              -

 */
uint8_t GPIO_ReadFromInputPin(GPIO_RegDef_t *pGPIOx, uint8_t PinNumber)
{
 800075c:	b480      	push	{r7}
 800075e:	b085      	sub	sp, #20
 8000760:	af00      	add	r7, sp, #0
 8000762:	6078      	str	r0, [r7, #4]
 8000764:	460b      	mov	r3, r1
 8000766:	70fb      	strb	r3, [r7, #3]
   uint8_t value;

   value = (uint8_t )((pGPIOx->IDR  >> PinNumber) & 0x00000001 ) ;
 8000768:	687b      	ldr	r3, [r7, #4]
 800076a:	691a      	ldr	r2, [r3, #16]
 800076c:	78fb      	ldrb	r3, [r7, #3]
 800076e:	fa22 f303 	lsr.w	r3, r2, r3
 8000772:	b2db      	uxtb	r3, r3
 8000774:	f003 0301 	and.w	r3, r3, #1
 8000778:	73fb      	strb	r3, [r7, #15]

   return value;
 800077a:	7bfb      	ldrb	r3, [r7, #15]
}
 800077c:	4618      	mov	r0, r3
 800077e:	3714      	adds	r7, #20
 8000780:	46bd      	mov	sp, r7
 8000782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000786:	4770      	bx	lr

08000788 <I2C_GenerateStartCondition>:

static void I2C_MasterHandleRXNEInterrupt(I2C_Handle_t *pI2CHandle );
static void I2C_MasterHandleTXEInterrupt(I2C_Handle_t *pI2CHandle );

static void I2C_GenerateStartCondition(I2C_RegDef_t *pI2Cx)
{
 8000788:	b480      	push	{r7}
 800078a:	b083      	sub	sp, #12
 800078c:	af00      	add	r7, sp, #0
 800078e:	6078      	str	r0, [r7, #4]
	pI2Cx->CR1 |= ( 1 << I2C_CR1_START);
 8000790:	687b      	ldr	r3, [r7, #4]
 8000792:	681b      	ldr	r3, [r3, #0]
 8000794:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8000798:	687b      	ldr	r3, [r7, #4]
 800079a:	601a      	str	r2, [r3, #0]
}
 800079c:	bf00      	nop
 800079e:	370c      	adds	r7, #12
 80007a0:	46bd      	mov	sp, r7
 80007a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007a6:	4770      	bx	lr

080007a8 <I2C_ExecuteAddressPhaseWrite>:



static void I2C_ExecuteAddressPhaseWrite(I2C_RegDef_t *pI2Cx, uint8_t SlaveAddr)
{
 80007a8:	b480      	push	{r7}
 80007aa:	b083      	sub	sp, #12
 80007ac:	af00      	add	r7, sp, #0
 80007ae:	6078      	str	r0, [r7, #4]
 80007b0:	460b      	mov	r3, r1
 80007b2:	70fb      	strb	r3, [r7, #3]
	SlaveAddr = SlaveAddr << 1;
 80007b4:	78fb      	ldrb	r3, [r7, #3]
 80007b6:	005b      	lsls	r3, r3, #1
 80007b8:	70fb      	strb	r3, [r7, #3]
	SlaveAddr &= ~(1); //SlaveAddr is Slave address + r/nw bit=0
 80007ba:	78fb      	ldrb	r3, [r7, #3]
 80007bc:	f023 0301 	bic.w	r3, r3, #1
 80007c0:	70fb      	strb	r3, [r7, #3]
	pI2Cx->DR = SlaveAddr;
 80007c2:	78fa      	ldrb	r2, [r7, #3]
 80007c4:	687b      	ldr	r3, [r7, #4]
 80007c6:	611a      	str	r2, [r3, #16]
}
 80007c8:	bf00      	nop
 80007ca:	370c      	adds	r7, #12
 80007cc:	46bd      	mov	sp, r7
 80007ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007d2:	4770      	bx	lr

080007d4 <I2C_ClearADDRFlag>:
	pI2Cx->DR = SlaveAddr;
}


static void I2C_ClearADDRFlag(I2C_Handle_t *pI2CHandle )
{
 80007d4:	b580      	push	{r7, lr}
 80007d6:	b084      	sub	sp, #16
 80007d8:	af00      	add	r7, sp, #0
 80007da:	6078      	str	r0, [r7, #4]
	uint32_t dummy_read;
	//check for device mode
	if(pI2CHandle->pI2Cx->SR2 & ( 1 << I2C_SR2_MSL))
 80007dc:	687b      	ldr	r3, [r7, #4]
 80007de:	681b      	ldr	r3, [r3, #0]
 80007e0:	699b      	ldr	r3, [r3, #24]
 80007e2:	f003 0301 	and.w	r3, r3, #1
 80007e6:	2b00      	cmp	r3, #0
 80007e8:	d01f      	beq.n	800082a <I2C_ClearADDRFlag+0x56>
	{
		//device is in master mode
		if(pI2CHandle->TxRxState == I2C_BUSY_IN_RX)
 80007ea:	687b      	ldr	r3, [r7, #4]
 80007ec:	7f1b      	ldrb	r3, [r3, #28]
 80007ee:	2b01      	cmp	r3, #1
 80007f0:	d112      	bne.n	8000818 <I2C_ClearADDRFlag+0x44>
		{
			if(pI2CHandle->RxSize  == 1)
 80007f2:	687b      	ldr	r3, [r7, #4]
 80007f4:	6a1b      	ldr	r3, [r3, #32]
 80007f6:	2b01      	cmp	r3, #1
 80007f8:	d11f      	bne.n	800083a <I2C_ClearADDRFlag+0x66>
			{
				//first disable the ack
				I2C_ManageAcking(pI2CHandle->pI2Cx,DISABLE);
 80007fa:	687b      	ldr	r3, [r7, #4]
 80007fc:	681b      	ldr	r3, [r3, #0]
 80007fe:	2100      	movs	r1, #0
 8000800:	4618      	mov	r0, r3
 8000802:	f000 f9ac 	bl	8000b5e <I2C_ManageAcking>

				//clear the ADDR flag ( read SR1 , read SR2)
				dummy_read = pI2CHandle->pI2Cx->SR1;
 8000806:	687b      	ldr	r3, [r7, #4]
 8000808:	681b      	ldr	r3, [r3, #0]
 800080a:	695b      	ldr	r3, [r3, #20]
 800080c:	60fb      	str	r3, [r7, #12]
				dummy_read = pI2CHandle->pI2Cx->SR2;
 800080e:	687b      	ldr	r3, [r7, #4]
 8000810:	681b      	ldr	r3, [r3, #0]
 8000812:	699b      	ldr	r3, [r3, #24]
 8000814:	60fb      	str	r3, [r7, #12]
		dummy_read = pI2CHandle->pI2Cx->SR2;
		(void)dummy_read;
	}


}
 8000816:	e010      	b.n	800083a <I2C_ClearADDRFlag+0x66>
			dummy_read = pI2CHandle->pI2Cx->SR1;
 8000818:	687b      	ldr	r3, [r7, #4]
 800081a:	681b      	ldr	r3, [r3, #0]
 800081c:	695b      	ldr	r3, [r3, #20]
 800081e:	60fb      	str	r3, [r7, #12]
			dummy_read = pI2CHandle->pI2Cx->SR2;
 8000820:	687b      	ldr	r3, [r7, #4]
 8000822:	681b      	ldr	r3, [r3, #0]
 8000824:	699b      	ldr	r3, [r3, #24]
 8000826:	60fb      	str	r3, [r7, #12]
}
 8000828:	e007      	b.n	800083a <I2C_ClearADDRFlag+0x66>
		dummy_read = pI2CHandle->pI2Cx->SR1;
 800082a:	687b      	ldr	r3, [r7, #4]
 800082c:	681b      	ldr	r3, [r3, #0]
 800082e:	695b      	ldr	r3, [r3, #20]
 8000830:	60fb      	str	r3, [r7, #12]
		dummy_read = pI2CHandle->pI2Cx->SR2;
 8000832:	687b      	ldr	r3, [r7, #4]
 8000834:	681b      	ldr	r3, [r3, #0]
 8000836:	699b      	ldr	r3, [r3, #24]
 8000838:	60fb      	str	r3, [r7, #12]
}
 800083a:	bf00      	nop
 800083c:	3710      	adds	r7, #16
 800083e:	46bd      	mov	sp, r7
 8000840:	bd80      	pop	{r7, pc}

08000842 <I2C_GenerateStopCondition>:


 void I2C_GenerateStopCondition(I2C_RegDef_t *pI2Cx)
{
 8000842:	b480      	push	{r7}
 8000844:	b083      	sub	sp, #12
 8000846:	af00      	add	r7, sp, #0
 8000848:	6078      	str	r0, [r7, #4]
	pI2Cx->CR1 |= ( 1 << I2C_CR1_STOP);
 800084a:	687b      	ldr	r3, [r7, #4]
 800084c:	681b      	ldr	r3, [r3, #0]
 800084e:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8000852:	687b      	ldr	r3, [r7, #4]
 8000854:	601a      	str	r2, [r3, #0]
}
 8000856:	bf00      	nop
 8000858:	370c      	adds	r7, #12
 800085a:	46bd      	mov	sp, r7
 800085c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000860:	4770      	bx	lr

08000862 <I2C_PeripheralControl>:
 *
 * @Note              -

 */
void I2C_PeripheralControl(I2C_RegDef_t *pI2Cx, uint8_t EnOrDi)
{
 8000862:	b480      	push	{r7}
 8000864:	b083      	sub	sp, #12
 8000866:	af00      	add	r7, sp, #0
 8000868:	6078      	str	r0, [r7, #4]
 800086a:	460b      	mov	r3, r1
 800086c:	70fb      	strb	r3, [r7, #3]
	if(EnOrDi == ENABLE)
 800086e:	78fb      	ldrb	r3, [r7, #3]
 8000870:	2b01      	cmp	r3, #1
 8000872:	d106      	bne.n	8000882 <I2C_PeripheralControl+0x20>
	{
		pI2Cx->CR1 |= (1 << I2C_CR1_PE);
 8000874:	687b      	ldr	r3, [r7, #4]
 8000876:	681b      	ldr	r3, [r3, #0]
 8000878:	f043 0201 	orr.w	r2, r3, #1
 800087c:	687b      	ldr	r3, [r7, #4]
 800087e:	601a      	str	r2, [r3, #0]
	}else
	{
		pI2Cx->CR1 &= ~(1 << 0);
	}

}
 8000880:	e005      	b.n	800088e <I2C_PeripheralControl+0x2c>
		pI2Cx->CR1 &= ~(1 << 0);
 8000882:	687b      	ldr	r3, [r7, #4]
 8000884:	681b      	ldr	r3, [r3, #0]
 8000886:	f023 0201 	bic.w	r2, r3, #1
 800088a:	687b      	ldr	r3, [r7, #4]
 800088c:	601a      	str	r2, [r3, #0]
}
 800088e:	bf00      	nop
 8000890:	370c      	adds	r7, #12
 8000892:	46bd      	mov	sp, r7
 8000894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000898:	4770      	bx	lr
	...

0800089c <I2C_PeriClockControl>:
 *
 * @Note              -

 */
void I2C_PeriClockControl(I2C_RegDef_t *pI2Cx, uint8_t EnorDi)
{
 800089c:	b480      	push	{r7}
 800089e:	b083      	sub	sp, #12
 80008a0:	af00      	add	r7, sp, #0
 80008a2:	6078      	str	r0, [r7, #4]
 80008a4:	460b      	mov	r3, r1
 80008a6:	70fb      	strb	r3, [r7, #3]
	if(EnorDi == ENABLE)
 80008a8:	78fb      	ldrb	r3, [r7, #3]
 80008aa:	2b01      	cmp	r3, #1
 80008ac:	d11f      	bne.n	80008ee <I2C_PeriClockControl+0x52>
	{
		if(pI2Cx == I2C1)
 80008ae:	687b      	ldr	r3, [r7, #4]
 80008b0:	4a12      	ldr	r2, [pc, #72]	; (80008fc <I2C_PeriClockControl+0x60>)
 80008b2:	4293      	cmp	r3, r2
 80008b4:	d106      	bne.n	80008c4 <I2C_PeriClockControl+0x28>
		{
			I2C1_PCLK_EN();
 80008b6:	4b12      	ldr	r3, [pc, #72]	; (8000900 <I2C_PeriClockControl+0x64>)
 80008b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008ba:	4a11      	ldr	r2, [pc, #68]	; (8000900 <I2C_PeriClockControl+0x64>)
 80008bc:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80008c0:	6413      	str	r3, [r2, #64]	; 0x40
	else
	{
		//TODO
	}

}
 80008c2:	e014      	b.n	80008ee <I2C_PeriClockControl+0x52>
		}else if (pI2Cx == I2C2)
 80008c4:	687b      	ldr	r3, [r7, #4]
 80008c6:	4a0f      	ldr	r2, [pc, #60]	; (8000904 <I2C_PeriClockControl+0x68>)
 80008c8:	4293      	cmp	r3, r2
 80008ca:	d106      	bne.n	80008da <I2C_PeriClockControl+0x3e>
			I2C2_PCLK_EN();
 80008cc:	4b0c      	ldr	r3, [pc, #48]	; (8000900 <I2C_PeriClockControl+0x64>)
 80008ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008d0:	4a0b      	ldr	r2, [pc, #44]	; (8000900 <I2C_PeriClockControl+0x64>)
 80008d2:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80008d6:	6413      	str	r3, [r2, #64]	; 0x40
}
 80008d8:	e009      	b.n	80008ee <I2C_PeriClockControl+0x52>
		}else if (pI2Cx == I2C3)
 80008da:	687b      	ldr	r3, [r7, #4]
 80008dc:	4a0a      	ldr	r2, [pc, #40]	; (8000908 <I2C_PeriClockControl+0x6c>)
 80008de:	4293      	cmp	r3, r2
 80008e0:	d105      	bne.n	80008ee <I2C_PeriClockControl+0x52>
			I2C3_PCLK_EN();
 80008e2:	4b07      	ldr	r3, [pc, #28]	; (8000900 <I2C_PeriClockControl+0x64>)
 80008e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008e6:	4a06      	ldr	r2, [pc, #24]	; (8000900 <I2C_PeriClockControl+0x64>)
 80008e8:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80008ec:	6413      	str	r3, [r2, #64]	; 0x40
}
 80008ee:	bf00      	nop
 80008f0:	370c      	adds	r7, #12
 80008f2:	46bd      	mov	sp, r7
 80008f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008f8:	4770      	bx	lr
 80008fa:	bf00      	nop
 80008fc:	40005400 	.word	0x40005400
 8000900:	40023800 	.word	0x40023800
 8000904:	40005800 	.word	0x40005800
 8000908:	40005c00 	.word	0x40005c00

0800090c <I2C_Init>:
 *
 * @Note              -

 */
void I2C_Init(I2C_Handle_t *pI2CHandle)
{
 800090c:	b580      	push	{r7, lr}
 800090e:	b084      	sub	sp, #16
 8000910:	af00      	add	r7, sp, #0
 8000912:	6078      	str	r0, [r7, #4]
	uint32_t tempreg = 0 ;
 8000914:	2300      	movs	r3, #0
 8000916:	60fb      	str	r3, [r7, #12]

	//enable the clock for the i2cx peripheral
	I2C_PeriClockControl(pI2CHandle->pI2Cx,ENABLE);
 8000918:	687b      	ldr	r3, [r7, #4]
 800091a:	681b      	ldr	r3, [r3, #0]
 800091c:	2101      	movs	r1, #1
 800091e:	4618      	mov	r0, r3
 8000920:	f7ff ffbc 	bl	800089c <I2C_PeriClockControl>

	//ack control bit
	tempreg |= pI2CHandle->I2C_Config.I2C_AckControl << 10;
 8000924:	687b      	ldr	r3, [r7, #4]
 8000926:	7a5b      	ldrb	r3, [r3, #9]
 8000928:	029b      	lsls	r3, r3, #10
 800092a:	461a      	mov	r2, r3
 800092c:	68fb      	ldr	r3, [r7, #12]
 800092e:	4313      	orrs	r3, r2
 8000930:	60fb      	str	r3, [r7, #12]
	pI2CHandle->pI2Cx->CR1 = tempreg;
 8000932:	687b      	ldr	r3, [r7, #4]
 8000934:	681b      	ldr	r3, [r3, #0]
 8000936:	68fa      	ldr	r2, [r7, #12]
 8000938:	601a      	str	r2, [r3, #0]

	//configure the FREQ field of CR2
	tempreg = 0;
 800093a:	2300      	movs	r3, #0
 800093c:	60fb      	str	r3, [r7, #12]
	tempreg |= RCC_GetPCLK1Value() /1000000U ;
 800093e:	f000 f92b 	bl	8000b98 <RCC_GetPCLK1Value>
 8000942:	4603      	mov	r3, r0
 8000944:	4a47      	ldr	r2, [pc, #284]	; (8000a64 <I2C_Init+0x158>)
 8000946:	fba2 2303 	umull	r2, r3, r2, r3
 800094a:	0c9b      	lsrs	r3, r3, #18
 800094c:	68fa      	ldr	r2, [r7, #12]
 800094e:	4313      	orrs	r3, r2
 8000950:	60fb      	str	r3, [r7, #12]
	pI2CHandle->pI2Cx->CR2 =  (tempreg & 0x3F);
 8000952:	687b      	ldr	r3, [r7, #4]
 8000954:	681b      	ldr	r3, [r3, #0]
 8000956:	68fa      	ldr	r2, [r7, #12]
 8000958:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 800095c:	605a      	str	r2, [r3, #4]

   //program the device own address
	tempreg = 0;
 800095e:	2300      	movs	r3, #0
 8000960:	60fb      	str	r3, [r7, #12]
	tempreg |= pI2CHandle->I2C_Config.I2C_DeviceAddress << 1;
 8000962:	687b      	ldr	r3, [r7, #4]
 8000964:	7a1b      	ldrb	r3, [r3, #8]
 8000966:	005b      	lsls	r3, r3, #1
 8000968:	461a      	mov	r2, r3
 800096a:	68fb      	ldr	r3, [r7, #12]
 800096c:	4313      	orrs	r3, r2
 800096e:	60fb      	str	r3, [r7, #12]
	tempreg |= ( 1 << 14);
 8000970:	68fb      	ldr	r3, [r7, #12]
 8000972:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000976:	60fb      	str	r3, [r7, #12]
	pI2CHandle->pI2Cx->OAR1 = tempreg;
 8000978:	687b      	ldr	r3, [r7, #4]
 800097a:	681b      	ldr	r3, [r3, #0]
 800097c:	68fa      	ldr	r2, [r7, #12]
 800097e:	609a      	str	r2, [r3, #8]

	//CCR calculations
	uint16_t ccr_value = 0;
 8000980:	2300      	movs	r3, #0
 8000982:	817b      	strh	r3, [r7, #10]
	tempreg = 0;
 8000984:	2300      	movs	r3, #0
 8000986:	60fb      	str	r3, [r7, #12]
	if(pI2CHandle->I2C_Config.I2C_SCLSpeed <= I2C_SCL_SPEED_SM)
 8000988:	687b      	ldr	r3, [r7, #4]
 800098a:	685b      	ldr	r3, [r3, #4]
 800098c:	4a36      	ldr	r2, [pc, #216]	; (8000a68 <I2C_Init+0x15c>)
 800098e:	4293      	cmp	r3, r2
 8000990:	d80f      	bhi.n	80009b2 <I2C_Init+0xa6>
	{
		//mode is standard mode
		ccr_value = (RCC_GetPCLK1Value() / ( 2 * pI2CHandle->I2C_Config.I2C_SCLSpeed ) );
 8000992:	f000 f901 	bl	8000b98 <RCC_GetPCLK1Value>
 8000996:	4602      	mov	r2, r0
 8000998:	687b      	ldr	r3, [r7, #4]
 800099a:	685b      	ldr	r3, [r3, #4]
 800099c:	005b      	lsls	r3, r3, #1
 800099e:	fbb2 f3f3 	udiv	r3, r2, r3
 80009a2:	817b      	strh	r3, [r7, #10]
		tempreg |= (ccr_value & 0xFFF);
 80009a4:	897b      	ldrh	r3, [r7, #10]
 80009a6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80009aa:	68fa      	ldr	r2, [r7, #12]
 80009ac:	4313      	orrs	r3, r2
 80009ae:	60fb      	str	r3, [r7, #12]
 80009b0:	e02d      	b.n	8000a0e <I2C_Init+0x102>
	}else
	{
		//mode is fast mode
		tempreg |= ( 1 << 15);
 80009b2:	68fb      	ldr	r3, [r7, #12]
 80009b4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80009b8:	60fb      	str	r3, [r7, #12]
		tempreg |= (pI2CHandle->I2C_Config.I2C_FMDutyCycle << 14);
 80009ba:	687b      	ldr	r3, [r7, #4]
 80009bc:	7a9b      	ldrb	r3, [r3, #10]
 80009be:	039b      	lsls	r3, r3, #14
 80009c0:	461a      	mov	r2, r3
 80009c2:	68fb      	ldr	r3, [r7, #12]
 80009c4:	4313      	orrs	r3, r2
 80009c6:	60fb      	str	r3, [r7, #12]
		if(pI2CHandle->I2C_Config.I2C_FMDutyCycle == I2C_FM_DUTY_2)
 80009c8:	687b      	ldr	r3, [r7, #4]
 80009ca:	7a9b      	ldrb	r3, [r3, #10]
 80009cc:	2b00      	cmp	r3, #0
 80009ce:	d10b      	bne.n	80009e8 <I2C_Init+0xdc>
		{
			ccr_value = (RCC_GetPCLK1Value() / ( 3 * pI2CHandle->I2C_Config.I2C_SCLSpeed ) );
 80009d0:	f000 f8e2 	bl	8000b98 <RCC_GetPCLK1Value>
 80009d4:	4601      	mov	r1, r0
 80009d6:	687b      	ldr	r3, [r7, #4]
 80009d8:	685a      	ldr	r2, [r3, #4]
 80009da:	4613      	mov	r3, r2
 80009dc:	005b      	lsls	r3, r3, #1
 80009de:	4413      	add	r3, r2
 80009e0:	fbb1 f3f3 	udiv	r3, r1, r3
 80009e4:	817b      	strh	r3, [r7, #10]
 80009e6:	e00c      	b.n	8000a02 <I2C_Init+0xf6>
		}else
		{
			ccr_value = (RCC_GetPCLK1Value() / ( 25 * pI2CHandle->I2C_Config.I2C_SCLSpeed ) );
 80009e8:	f000 f8d6 	bl	8000b98 <RCC_GetPCLK1Value>
 80009ec:	4601      	mov	r1, r0
 80009ee:	687b      	ldr	r3, [r7, #4]
 80009f0:	685a      	ldr	r2, [r3, #4]
 80009f2:	4613      	mov	r3, r2
 80009f4:	009b      	lsls	r3, r3, #2
 80009f6:	4413      	add	r3, r2
 80009f8:	009a      	lsls	r2, r3, #2
 80009fa:	4413      	add	r3, r2
 80009fc:	fbb1 f3f3 	udiv	r3, r1, r3
 8000a00:	817b      	strh	r3, [r7, #10]
		}
		tempreg |= (ccr_value & 0xFFF);
 8000a02:	897b      	ldrh	r3, [r7, #10]
 8000a04:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000a08:	68fa      	ldr	r2, [r7, #12]
 8000a0a:	4313      	orrs	r3, r2
 8000a0c:	60fb      	str	r3, [r7, #12]
	}
	pI2CHandle->pI2Cx->CCR = tempreg;
 8000a0e:	687b      	ldr	r3, [r7, #4]
 8000a10:	681b      	ldr	r3, [r3, #0]
 8000a12:	68fa      	ldr	r2, [r7, #12]
 8000a14:	61da      	str	r2, [r3, #28]

	//TRISE Configuration
	if(pI2CHandle->I2C_Config.I2C_SCLSpeed <= I2C_SCL_SPEED_SM)
 8000a16:	687b      	ldr	r3, [r7, #4]
 8000a18:	685b      	ldr	r3, [r3, #4]
 8000a1a:	4a13      	ldr	r2, [pc, #76]	; (8000a68 <I2C_Init+0x15c>)
 8000a1c:	4293      	cmp	r3, r2
 8000a1e:	d809      	bhi.n	8000a34 <I2C_Init+0x128>
	{
		//mode is standard mode

		tempreg = (RCC_GetPCLK1Value() /1000000U) + 1 ;
 8000a20:	f000 f8ba 	bl	8000b98 <RCC_GetPCLK1Value>
 8000a24:	4603      	mov	r3, r0
 8000a26:	4a0f      	ldr	r2, [pc, #60]	; (8000a64 <I2C_Init+0x158>)
 8000a28:	fba2 2303 	umull	r2, r3, r2, r3
 8000a2c:	0c9b      	lsrs	r3, r3, #18
 8000a2e:	3301      	adds	r3, #1
 8000a30:	60fb      	str	r3, [r7, #12]
 8000a32:	e00d      	b.n	8000a50 <I2C_Init+0x144>

	}else
	{
		//mode is fast mode
		tempreg = ( (RCC_GetPCLK1Value() * 300) / 1000000000U ) + 1;
 8000a34:	f000 f8b0 	bl	8000b98 <RCC_GetPCLK1Value>
 8000a38:	4603      	mov	r3, r0
 8000a3a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8000a3e:	fb02 f303 	mul.w	r3, r2, r3
 8000a42:	0a5b      	lsrs	r3, r3, #9
 8000a44:	4a09      	ldr	r2, [pc, #36]	; (8000a6c <I2C_Init+0x160>)
 8000a46:	fba2 2303 	umull	r2, r3, r2, r3
 8000a4a:	09db      	lsrs	r3, r3, #7
 8000a4c:	3301      	adds	r3, #1
 8000a4e:	60fb      	str	r3, [r7, #12]

	}

	pI2CHandle->pI2Cx->TRISE = (tempreg & 0x3F);
 8000a50:	687b      	ldr	r3, [r7, #4]
 8000a52:	681b      	ldr	r3, [r3, #0]
 8000a54:	68fa      	ldr	r2, [r7, #12]
 8000a56:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 8000a5a:	621a      	str	r2, [r3, #32]

}
 8000a5c:	bf00      	nop
 8000a5e:	3710      	adds	r7, #16
 8000a60:	46bd      	mov	sp, r7
 8000a62:	bd80      	pop	{r7, pc}
 8000a64:	431bde83 	.word	0x431bde83
 8000a68:	000186a0 	.word	0x000186a0
 8000a6c:	00044b83 	.word	0x00044b83

08000a70 <I2C_GetFlagStatus>:

}


uint8_t I2C_GetFlagStatus(I2C_RegDef_t *pI2Cx , uint32_t FlagName)
{
 8000a70:	b480      	push	{r7}
 8000a72:	b083      	sub	sp, #12
 8000a74:	af00      	add	r7, sp, #0
 8000a76:	6078      	str	r0, [r7, #4]
 8000a78:	6039      	str	r1, [r7, #0]
	if(pI2Cx->SR1 & FlagName)
 8000a7a:	687b      	ldr	r3, [r7, #4]
 8000a7c:	695a      	ldr	r2, [r3, #20]
 8000a7e:	683b      	ldr	r3, [r7, #0]
 8000a80:	4013      	ands	r3, r2
 8000a82:	2b00      	cmp	r3, #0
 8000a84:	d001      	beq.n	8000a8a <I2C_GetFlagStatus+0x1a>
	{
		return FLAG_SET;
 8000a86:	2301      	movs	r3, #1
 8000a88:	e000      	b.n	8000a8c <I2C_GetFlagStatus+0x1c>
	}
	return FLAG_RESET;
 8000a8a:	2300      	movs	r3, #0
}
 8000a8c:	4618      	mov	r0, r3
 8000a8e:	370c      	adds	r7, #12
 8000a90:	46bd      	mov	sp, r7
 8000a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a96:	4770      	bx	lr

08000a98 <I2C_MasterSendData>:



void I2C_MasterSendData(I2C_Handle_t *pI2CHandle,uint8_t *pTxbuffer, uint32_t Len, uint8_t SlaveAddr,uint8_t Sr)
{
 8000a98:	b580      	push	{r7, lr}
 8000a9a:	b084      	sub	sp, #16
 8000a9c:	af00      	add	r7, sp, #0
 8000a9e:	60f8      	str	r0, [r7, #12]
 8000aa0:	60b9      	str	r1, [r7, #8]
 8000aa2:	607a      	str	r2, [r7, #4]
 8000aa4:	70fb      	strb	r3, [r7, #3]
	// 1. Generate the START condition
	I2C_GenerateStartCondition(pI2CHandle->pI2Cx);
 8000aa6:	68fb      	ldr	r3, [r7, #12]
 8000aa8:	681b      	ldr	r3, [r3, #0]
 8000aaa:	4618      	mov	r0, r3
 8000aac:	f7ff fe6c 	bl	8000788 <I2C_GenerateStartCondition>

	//2. confirm that start generation is completed by checking the SB flag in the SR1
	//   Note: Until SB is cleared SCL will be stretched (pulled to LOW)
	while( !  I2C_GetFlagStatus(pI2CHandle->pI2Cx,I2C_FLAG_SB)   );
 8000ab0:	bf00      	nop
 8000ab2:	68fb      	ldr	r3, [r7, #12]
 8000ab4:	681b      	ldr	r3, [r3, #0]
 8000ab6:	2101      	movs	r1, #1
 8000ab8:	4618      	mov	r0, r3
 8000aba:	f7ff ffd9 	bl	8000a70 <I2C_GetFlagStatus>
 8000abe:	4603      	mov	r3, r0
 8000ac0:	2b00      	cmp	r3, #0
 8000ac2:	d0f6      	beq.n	8000ab2 <I2C_MasterSendData+0x1a>

	//3. Send the address of the slave with r/nw bit set to w(0) (total 8 bits )
	I2C_ExecuteAddressPhaseWrite(pI2CHandle->pI2Cx,SlaveAddr);
 8000ac4:	68fb      	ldr	r3, [r7, #12]
 8000ac6:	681b      	ldr	r3, [r3, #0]
 8000ac8:	78fa      	ldrb	r2, [r7, #3]
 8000aca:	4611      	mov	r1, r2
 8000acc:	4618      	mov	r0, r3
 8000ace:	f7ff fe6b 	bl	80007a8 <I2C_ExecuteAddressPhaseWrite>

	//4. Confirm that address phase is completed by checking the ADDR flag in teh SR1
	while( !  I2C_GetFlagStatus(pI2CHandle->pI2Cx,I2C_FLAG_ADDR)   );
 8000ad2:	bf00      	nop
 8000ad4:	68fb      	ldr	r3, [r7, #12]
 8000ad6:	681b      	ldr	r3, [r3, #0]
 8000ad8:	2102      	movs	r1, #2
 8000ada:	4618      	mov	r0, r3
 8000adc:	f7ff ffc8 	bl	8000a70 <I2C_GetFlagStatus>
 8000ae0:	4603      	mov	r3, r0
 8000ae2:	2b00      	cmp	r3, #0
 8000ae4:	d0f6      	beq.n	8000ad4 <I2C_MasterSendData+0x3c>

	//5. clear the ADDR flag according to its software sequence
	//   Note: Until ADDR is cleared SCL will be stretched (pulled to LOW)
	I2C_ClearADDRFlag(pI2CHandle);
 8000ae6:	68f8      	ldr	r0, [r7, #12]
 8000ae8:	f7ff fe74 	bl	80007d4 <I2C_ClearADDRFlag>

	//6. send the data until len becomes 0

	while(Len > 0)
 8000aec:	e014      	b.n	8000b18 <I2C_MasterSendData+0x80>
	{
		while(! I2C_GetFlagStatus(pI2CHandle->pI2Cx,I2C_FLAG_TXE) ); //Wait till TXE is set
 8000aee:	bf00      	nop
 8000af0:	68fb      	ldr	r3, [r7, #12]
 8000af2:	681b      	ldr	r3, [r3, #0]
 8000af4:	2180      	movs	r1, #128	; 0x80
 8000af6:	4618      	mov	r0, r3
 8000af8:	f7ff ffba 	bl	8000a70 <I2C_GetFlagStatus>
 8000afc:	4603      	mov	r3, r0
 8000afe:	2b00      	cmp	r3, #0
 8000b00:	d0f6      	beq.n	8000af0 <I2C_MasterSendData+0x58>
		pI2CHandle->pI2Cx->DR = *pTxbuffer;
 8000b02:	68bb      	ldr	r3, [r7, #8]
 8000b04:	781a      	ldrb	r2, [r3, #0]
 8000b06:	68fb      	ldr	r3, [r7, #12]
 8000b08:	681b      	ldr	r3, [r3, #0]
 8000b0a:	611a      	str	r2, [r3, #16]
		pTxbuffer++;
 8000b0c:	68bb      	ldr	r3, [r7, #8]
 8000b0e:	3301      	adds	r3, #1
 8000b10:	60bb      	str	r3, [r7, #8]
		Len--;
 8000b12:	687b      	ldr	r3, [r7, #4]
 8000b14:	3b01      	subs	r3, #1
 8000b16:	607b      	str	r3, [r7, #4]
	while(Len > 0)
 8000b18:	687b      	ldr	r3, [r7, #4]
 8000b1a:	2b00      	cmp	r3, #0
 8000b1c:	d1e7      	bne.n	8000aee <I2C_MasterSendData+0x56>

	//7. when Len becomes zero wait for TXE=1 and BTF=1 before generating the STOP condition
	//   Note: TXE=1 , BTF=1 , means that both SR and DR are empty and next transmission should begin
	//   when BTF=1 SCL will be stretched (pulled to LOW)

	while(! I2C_GetFlagStatus(pI2CHandle->pI2Cx,I2C_FLAG_TXE) );
 8000b1e:	bf00      	nop
 8000b20:	68fb      	ldr	r3, [r7, #12]
 8000b22:	681b      	ldr	r3, [r3, #0]
 8000b24:	2180      	movs	r1, #128	; 0x80
 8000b26:	4618      	mov	r0, r3
 8000b28:	f7ff ffa2 	bl	8000a70 <I2C_GetFlagStatus>
 8000b2c:	4603      	mov	r3, r0
 8000b2e:	2b00      	cmp	r3, #0
 8000b30:	d0f6      	beq.n	8000b20 <I2C_MasterSendData+0x88>

	while(! I2C_GetFlagStatus(pI2CHandle->pI2Cx,I2C_FLAG_BTF) );
 8000b32:	bf00      	nop
 8000b34:	68fb      	ldr	r3, [r7, #12]
 8000b36:	681b      	ldr	r3, [r3, #0]
 8000b38:	2104      	movs	r1, #4
 8000b3a:	4618      	mov	r0, r3
 8000b3c:	f7ff ff98 	bl	8000a70 <I2C_GetFlagStatus>
 8000b40:	4603      	mov	r3, r0
 8000b42:	2b00      	cmp	r3, #0
 8000b44:	d0f6      	beq.n	8000b34 <I2C_MasterSendData+0x9c>


	//8. Generate STOP condition and master need not to wait for the completion of stop condition.
	//   Note: generating STOP, automatically clears the BTF
	if(Sr == I2C_DISABLE_SR )
 8000b46:	7e3b      	ldrb	r3, [r7, #24]
 8000b48:	2b00      	cmp	r3, #0
 8000b4a:	d104      	bne.n	8000b56 <I2C_MasterSendData+0xbe>
		I2C_GenerateStopCondition(pI2CHandle->pI2Cx);
 8000b4c:	68fb      	ldr	r3, [r7, #12]
 8000b4e:	681b      	ldr	r3, [r3, #0]
 8000b50:	4618      	mov	r0, r3
 8000b52:	f7ff fe76 	bl	8000842 <I2C_GenerateStopCondition>

}
 8000b56:	bf00      	nop
 8000b58:	3710      	adds	r7, #16
 8000b5a:	46bd      	mov	sp, r7
 8000b5c:	bd80      	pop	{r7, pc}

08000b5e <I2C_ManageAcking>:

}


void I2C_ManageAcking(I2C_RegDef_t *pI2Cx, uint8_t EnorDi)
{
 8000b5e:	b480      	push	{r7}
 8000b60:	b083      	sub	sp, #12
 8000b62:	af00      	add	r7, sp, #0
 8000b64:	6078      	str	r0, [r7, #4]
 8000b66:	460b      	mov	r3, r1
 8000b68:	70fb      	strb	r3, [r7, #3]
	if(EnorDi == I2C_ACK_ENABLE)
 8000b6a:	78fb      	ldrb	r3, [r7, #3]
 8000b6c:	2b01      	cmp	r3, #1
 8000b6e:	d106      	bne.n	8000b7e <I2C_ManageAcking+0x20>
	{
		//enable the ack
		pI2Cx->CR1 |= ( 1 << I2C_CR1_ACK);
 8000b70:	687b      	ldr	r3, [r7, #4]
 8000b72:	681b      	ldr	r3, [r3, #0]
 8000b74:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8000b78:	687b      	ldr	r3, [r7, #4]
 8000b7a:	601a      	str	r2, [r3, #0]
	}else
	{
		//disable the ack
		pI2Cx->CR1 &= ~( 1 << I2C_CR1_ACK);
	}
}
 8000b7c:	e005      	b.n	8000b8a <I2C_ManageAcking+0x2c>
		pI2Cx->CR1 &= ~( 1 << I2C_CR1_ACK);
 8000b7e:	687b      	ldr	r3, [r7, #4]
 8000b80:	681b      	ldr	r3, [r3, #0]
 8000b82:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8000b86:	687b      	ldr	r3, [r7, #4]
 8000b88:	601a      	str	r2, [r3, #0]
}
 8000b8a:	bf00      	nop
 8000b8c:	370c      	adds	r7, #12
 8000b8e:	46bd      	mov	sp, r7
 8000b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b94:	4770      	bx	lr
	...

08000b98 <RCC_GetPCLK1Value>:
uint8_t APB1_PreScaler[4] = { 2, 4 , 8, 16};



uint32_t RCC_GetPCLK1Value(void)
{
 8000b98:	b580      	push	{r7, lr}
 8000b9a:	b084      	sub	sp, #16
 8000b9c:	af00      	add	r7, sp, #0
	uint32_t pclk1,SystemClk;

	uint8_t clksrc,temp,ahbp,apb1p;

	clksrc = ((RCC->CFGR >> 2) & 0x3);
 8000b9e:	4b25      	ldr	r3, [pc, #148]	; (8000c34 <RCC_GetPCLK1Value+0x9c>)
 8000ba0:	689b      	ldr	r3, [r3, #8]
 8000ba2:	089b      	lsrs	r3, r3, #2
 8000ba4:	b2db      	uxtb	r3, r3
 8000ba6:	f003 0303 	and.w	r3, r3, #3
 8000baa:	727b      	strb	r3, [r7, #9]

	if(clksrc == 0 )
 8000bac:	7a7b      	ldrb	r3, [r7, #9]
 8000bae:	2b00      	cmp	r3, #0
 8000bb0:	d102      	bne.n	8000bb8 <RCC_GetPCLK1Value+0x20>
	{
		SystemClk = 16000000;
 8000bb2:	4b21      	ldr	r3, [pc, #132]	; (8000c38 <RCC_GetPCLK1Value+0xa0>)
 8000bb4:	60fb      	str	r3, [r7, #12]
 8000bb6:	e00b      	b.n	8000bd0 <RCC_GetPCLK1Value+0x38>
	}else if(clksrc == 1)
 8000bb8:	7a7b      	ldrb	r3, [r7, #9]
 8000bba:	2b01      	cmp	r3, #1
 8000bbc:	d102      	bne.n	8000bc4 <RCC_GetPCLK1Value+0x2c>
	{
		SystemClk = 8000000;
 8000bbe:	4b1f      	ldr	r3, [pc, #124]	; (8000c3c <RCC_GetPCLK1Value+0xa4>)
 8000bc0:	60fb      	str	r3, [r7, #12]
 8000bc2:	e005      	b.n	8000bd0 <RCC_GetPCLK1Value+0x38>
	}else if (clksrc == 2)
 8000bc4:	7a7b      	ldrb	r3, [r7, #9]
 8000bc6:	2b02      	cmp	r3, #2
 8000bc8:	d102      	bne.n	8000bd0 <RCC_GetPCLK1Value+0x38>
	{
		SystemClk = RCC_GetPLLOutputClock();
 8000bca:	f000 f83d 	bl	8000c48 <RCC_GetPLLOutputClock>
 8000bce:	60f8      	str	r0, [r7, #12]
	}

	//for ahb
	temp = ((RCC->CFGR >> 4 ) & 0xF);
 8000bd0:	4b18      	ldr	r3, [pc, #96]	; (8000c34 <RCC_GetPCLK1Value+0x9c>)
 8000bd2:	689b      	ldr	r3, [r3, #8]
 8000bd4:	091b      	lsrs	r3, r3, #4
 8000bd6:	b2db      	uxtb	r3, r3
 8000bd8:	f003 030f 	and.w	r3, r3, #15
 8000bdc:	723b      	strb	r3, [r7, #8]

	if(temp < 8)
 8000bde:	7a3b      	ldrb	r3, [r7, #8]
 8000be0:	2b07      	cmp	r3, #7
 8000be2:	d802      	bhi.n	8000bea <RCC_GetPCLK1Value+0x52>
	{
		ahbp = 1;
 8000be4:	2301      	movs	r3, #1
 8000be6:	72fb      	strb	r3, [r7, #11]
 8000be8:	e005      	b.n	8000bf6 <RCC_GetPCLK1Value+0x5e>
	}else
	{
		ahbp = AHB_PreScaler[temp-8];
 8000bea:	7a3b      	ldrb	r3, [r7, #8]
 8000bec:	3b08      	subs	r3, #8
 8000bee:	4a14      	ldr	r2, [pc, #80]	; (8000c40 <RCC_GetPCLK1Value+0xa8>)
 8000bf0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000bf4:	72fb      	strb	r3, [r7, #11]
	}



	//apb1
	temp = ((RCC->CFGR >> 10 ) & 0x7);
 8000bf6:	4b0f      	ldr	r3, [pc, #60]	; (8000c34 <RCC_GetPCLK1Value+0x9c>)
 8000bf8:	689b      	ldr	r3, [r3, #8]
 8000bfa:	0a9b      	lsrs	r3, r3, #10
 8000bfc:	b2db      	uxtb	r3, r3
 8000bfe:	f003 0307 	and.w	r3, r3, #7
 8000c02:	723b      	strb	r3, [r7, #8]

	if(temp < 4)
 8000c04:	7a3b      	ldrb	r3, [r7, #8]
 8000c06:	2b03      	cmp	r3, #3
 8000c08:	d802      	bhi.n	8000c10 <RCC_GetPCLK1Value+0x78>
	{
		apb1p = 1;
 8000c0a:	2301      	movs	r3, #1
 8000c0c:	72bb      	strb	r3, [r7, #10]
 8000c0e:	e004      	b.n	8000c1a <RCC_GetPCLK1Value+0x82>
	}else
	{
		apb1p = APB1_PreScaler[temp-4];
 8000c10:	7a3b      	ldrb	r3, [r7, #8]
 8000c12:	3b04      	subs	r3, #4
 8000c14:	4a0b      	ldr	r2, [pc, #44]	; (8000c44 <RCC_GetPCLK1Value+0xac>)
 8000c16:	5cd3      	ldrb	r3, [r2, r3]
 8000c18:	72bb      	strb	r3, [r7, #10]
	}

	pclk1 =  (SystemClk / ahbp) /apb1p;
 8000c1a:	7afb      	ldrb	r3, [r7, #11]
 8000c1c:	68fa      	ldr	r2, [r7, #12]
 8000c1e:	fbb2 f2f3 	udiv	r2, r2, r3
 8000c22:	7abb      	ldrb	r3, [r7, #10]
 8000c24:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c28:	607b      	str	r3, [r7, #4]

	return pclk1;
 8000c2a:	687b      	ldr	r3, [r7, #4]
}
 8000c2c:	4618      	mov	r0, r3
 8000c2e:	3710      	adds	r7, #16
 8000c30:	46bd      	mov	sp, r7
 8000c32:	bd80      	pop	{r7, pc}
 8000c34:	40023800 	.word	0x40023800
 8000c38:	00f42400 	.word	0x00f42400
 8000c3c:	007a1200 	.word	0x007a1200
 8000c40:	20000004 	.word	0x20000004
 8000c44:	20000014 	.word	0x20000014

08000c48 <RCC_GetPLLOutputClock>:

	return pclk2;
}

uint32_t  RCC_GetPLLOutputClock()
{
 8000c48:	b480      	push	{r7}
 8000c4a:	af00      	add	r7, sp, #0

	return 0;
 8000c4c:	2300      	movs	r3, #0
}
 8000c4e:	4618      	mov	r0, r3
 8000c50:	46bd      	mov	sp, r7
 8000c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c56:	4770      	bx	lr

08000c58 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000c58:	480d      	ldr	r0, [pc, #52]	; (8000c90 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000c5a:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000c5c:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000c60:	480c      	ldr	r0, [pc, #48]	; (8000c94 <LoopForever+0x6>)
  ldr r1, =_edata
 8000c62:	490d      	ldr	r1, [pc, #52]	; (8000c98 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000c64:	4a0d      	ldr	r2, [pc, #52]	; (8000c9c <LoopForever+0xe>)
  movs r3, #0
 8000c66:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000c68:	e002      	b.n	8000c70 <LoopCopyDataInit>

08000c6a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c6a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c6c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c6e:	3304      	adds	r3, #4

08000c70 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c70:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c72:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c74:	d3f9      	bcc.n	8000c6a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c76:	4a0a      	ldr	r2, [pc, #40]	; (8000ca0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000c78:	4c0a      	ldr	r4, [pc, #40]	; (8000ca4 <LoopForever+0x16>)
  movs r3, #0
 8000c7a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c7c:	e001      	b.n	8000c82 <LoopFillZerobss>

08000c7e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c7e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c80:	3204      	adds	r2, #4

08000c82 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c82:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c84:	d3fb      	bcc.n	8000c7e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000c86:	f000 f811 	bl	8000cac <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000c8a:	f7ff fb19 	bl	80002c0 <main>

08000c8e <LoopForever>:

LoopForever:
    b LoopForever
 8000c8e:	e7fe      	b.n	8000c8e <LoopForever>
  ldr   r0, =_estack
 8000c90:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000c94:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000c98:	20000018 	.word	0x20000018
  ldr r2, =_sidata
 8000c9c:	08000d14 	.word	0x08000d14
  ldr r2, =_sbss
 8000ca0:	20000018 	.word	0x20000018
  ldr r4, =_ebss
 8000ca4:	2000005c 	.word	0x2000005c

08000ca8 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000ca8:	e7fe      	b.n	8000ca8 <ADC_IRQHandler>
	...

08000cac <__libc_init_array>:
 8000cac:	b570      	push	{r4, r5, r6, lr}
 8000cae:	4d0d      	ldr	r5, [pc, #52]	; (8000ce4 <__libc_init_array+0x38>)
 8000cb0:	4c0d      	ldr	r4, [pc, #52]	; (8000ce8 <__libc_init_array+0x3c>)
 8000cb2:	1b64      	subs	r4, r4, r5
 8000cb4:	10a4      	asrs	r4, r4, #2
 8000cb6:	2600      	movs	r6, #0
 8000cb8:	42a6      	cmp	r6, r4
 8000cba:	d109      	bne.n	8000cd0 <__libc_init_array+0x24>
 8000cbc:	4d0b      	ldr	r5, [pc, #44]	; (8000cec <__libc_init_array+0x40>)
 8000cbe:	4c0c      	ldr	r4, [pc, #48]	; (8000cf0 <__libc_init_array+0x44>)
 8000cc0:	f000 f818 	bl	8000cf4 <_init>
 8000cc4:	1b64      	subs	r4, r4, r5
 8000cc6:	10a4      	asrs	r4, r4, #2
 8000cc8:	2600      	movs	r6, #0
 8000cca:	42a6      	cmp	r6, r4
 8000ccc:	d105      	bne.n	8000cda <__libc_init_array+0x2e>
 8000cce:	bd70      	pop	{r4, r5, r6, pc}
 8000cd0:	f855 3b04 	ldr.w	r3, [r5], #4
 8000cd4:	4798      	blx	r3
 8000cd6:	3601      	adds	r6, #1
 8000cd8:	e7ee      	b.n	8000cb8 <__libc_init_array+0xc>
 8000cda:	f855 3b04 	ldr.w	r3, [r5], #4
 8000cde:	4798      	blx	r3
 8000ce0:	3601      	adds	r6, #1
 8000ce2:	e7f2      	b.n	8000cca <__libc_init_array+0x1e>
 8000ce4:	08000d0c 	.word	0x08000d0c
 8000ce8:	08000d0c 	.word	0x08000d0c
 8000cec:	08000d0c 	.word	0x08000d0c
 8000cf0:	08000d10 	.word	0x08000d10

08000cf4 <_init>:
 8000cf4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000cf6:	bf00      	nop
 8000cf8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000cfa:	bc08      	pop	{r3}
 8000cfc:	469e      	mov	lr, r3
 8000cfe:	4770      	bx	lr

08000d00 <_fini>:
 8000d00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000d02:	bf00      	nop
 8000d04:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000d06:	bc08      	pop	{r3}
 8000d08:	469e      	mov	lr, r3
 8000d0a:	4770      	bx	lr
