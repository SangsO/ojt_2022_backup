
221102_stm32f411_drivers_I2CbyGPIO.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000930  08000198  08000198  00010198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000ac8  08000ad0  00010ad0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000ac8  08000ac8  00010ad0  2**0
                  CONTENTS
  4 .ARM          00000000  08000ac8  08000ac8  00010ad0  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000ac8  08000ad0  00010ad0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000ac8  08000ac8  00010ac8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000acc  08000acc  00010acc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  00010ad0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000028  20000000  08000ad0  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000028  08000ad0  00020028  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00010ad0  2**0
                  CONTENTS, READONLY
 12 .debug_info   00000ed3  00000000  00000000  00010b00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000389  00000000  00000000  000119d3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000138  00000000  00000000  00011d60  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000110  00000000  00000000  00011e98  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00002b58  00000000  00000000  00011fa8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000137e  00000000  00000000  00014b00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0000a8a9  00000000  00000000  00015e7e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00020727  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000458  00000000  00000000  00020778  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000000 	.word	0x20000000
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08000ab0 	.word	0x08000ab0

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000004 	.word	0x20000004
 80001d4:	08000ab0 	.word	0x08000ab0

080001d8 <delay>:
//
//	I2C_Init(&I2C1Handle);
//}
/************************************************************************************************/

void delay(uint32_t k) {
 80001d8:	b480      	push	{r7}
 80001da:	b085      	sub	sp, #20
 80001dc:	af00      	add	r7, sp, #0
 80001de:	6078      	str	r0, [r7, #4]
	uint32_t i;
	for (i = 0; i < k; i++)
 80001e0:	2300      	movs	r3, #0
 80001e2:	60fb      	str	r3, [r7, #12]
 80001e4:	e003      	b.n	80001ee <delay+0x16>
		__asm("nop");
 80001e6:	bf00      	nop
	for (i = 0; i < k; i++)
 80001e8:	68fb      	ldr	r3, [r7, #12]
 80001ea:	3301      	adds	r3, #1
 80001ec:	60fb      	str	r3, [r7, #12]
 80001ee:	68fa      	ldr	r2, [r7, #12]
 80001f0:	687b      	ldr	r3, [r7, #4]
 80001f2:	429a      	cmp	r2, r3
 80001f4:	d3f7      	bcc.n	80001e6 <delay+0xe>
}
 80001f6:	bf00      	nop
 80001f8:	bf00      	nop
 80001fa:	3714      	adds	r7, #20
 80001fc:	46bd      	mov	sp, r7
 80001fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000202:	4770      	bx	lr

08000204 <reverse_IO>:

void reverse_IO(GPIO_Handle_t a) {
 8000204:	b480      	push	{r7}
 8000206:	b085      	sub	sp, #20
 8000208:	af00      	add	r7, sp, #0
 800020a:	1d3b      	adds	r3, r7, #4
 800020c:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	if (a.GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IN) {
 8000210:	7a7b      	ldrb	r3, [r7, #9]
 8000212:	2b00      	cmp	r3, #0
 8000214:	d102      	bne.n	800021c <reverse_IO+0x18>
		a.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_OUT;
 8000216:	2301      	movs	r3, #1
 8000218:	727b      	strb	r3, [r7, #9]
	} else if (a.GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_OUT) {
		a.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_IN;
	}
}
 800021a:	e004      	b.n	8000226 <reverse_IO+0x22>
	} else if (a.GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_OUT) {
 800021c:	7a7b      	ldrb	r3, [r7, #9]
 800021e:	2b01      	cmp	r3, #1
 8000220:	d101      	bne.n	8000226 <reverse_IO+0x22>
		a.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_IN;
 8000222:	2300      	movs	r3, #0
 8000224:	727b      	strb	r3, [r7, #9]
}
 8000226:	bf00      	nop
 8000228:	3714      	adds	r7, #20
 800022a:	46bd      	mov	sp, r7
 800022c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000230:	4770      	bx	lr
	...

08000234 <GPIO_ButtonInit>:

void GPIO_ButtonInit(void) {
 8000234:	b580      	push	{r7, lr}
 8000236:	b084      	sub	sp, #16
 8000238:	af00      	add	r7, sp, #0
	GPIO_Handle_t GPIOBtn;

	// User Blue Button gpio configuration
	GPIOBtn.pGPIOx = GPIOC;
 800023a:	4b09      	ldr	r3, [pc, #36]	; (8000260 <GPIO_ButtonInit+0x2c>)
 800023c:	607b      	str	r3, [r7, #4]
	GPIOBtn.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_13;
 800023e:	230d      	movs	r3, #13
 8000240:	723b      	strb	r3, [r7, #8]
	GPIOBtn.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_IN;
 8000242:	2300      	movs	r3, #0
 8000244:	727b      	strb	r3, [r7, #9]
	GPIOBtn.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_FAST;
 8000246:	2302      	movs	r3, #2
 8000248:	72bb      	strb	r3, [r7, #10]
	GPIOBtn.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_NO_PUPD;
 800024a:	2300      	movs	r3, #0
 800024c:	72fb      	strb	r3, [r7, #11]

	GPIO_Init(&GPIOBtn);
 800024e:	1d3b      	adds	r3, r7, #4
 8000250:	4618      	mov	r0, r3
 8000252:	f000 fa07 	bl	8000664 <GPIO_Init>
}
 8000256:	bf00      	nop
 8000258:	3710      	adds	r7, #16
 800025a:	46bd      	mov	sp, r7
 800025c:	bd80      	pop	{r7, pc}
 800025e:	bf00      	nop
 8000260:	40020800 	.word	0x40020800

08000264 <GPIO_SCL_init>:

void GPIO_SCL_init(void) {
 8000264:	b580      	push	{r7, lr}
 8000266:	b084      	sub	sp, #16
 8000268:	af00      	add	r7, sp, #0
	GPIO_Handle_t sclGPIO;

	sclGPIO.pGPIOx = GPIOB;
 800026a:	4b09      	ldr	r3, [pc, #36]	; (8000290 <GPIO_SCL_init+0x2c>)
 800026c:	607b      	str	r3, [r7, #4]
	sclGPIO.GPIO_PinConfig.GPIO_PinNumber = SCL;
 800026e:	2304      	movs	r3, #4
 8000270:	723b      	strb	r3, [r7, #8]
	sclGPIO.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_OUT;
 8000272:	2301      	movs	r3, #1
 8000274:	727b      	strb	r3, [r7, #9]
	sclGPIO.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_FAST;
 8000276:	2302      	movs	r3, #2
 8000278:	72bb      	strb	r3, [r7, #10]
	sclGPIO.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_PIN_PU;
 800027a:	2301      	movs	r3, #1
 800027c:	72fb      	strb	r3, [r7, #11]

	GPIO_Init(&sclGPIO);
 800027e:	1d3b      	adds	r3, r7, #4
 8000280:	4618      	mov	r0, r3
 8000282:	f000 f9ef 	bl	8000664 <GPIO_Init>

	//GPIO_ToggleOutputPin(GPIOB, 5);
}
 8000286:	bf00      	nop
 8000288:	3710      	adds	r7, #16
 800028a:	46bd      	mov	sp, r7
 800028c:	bd80      	pop	{r7, pc}
 800028e:	bf00      	nop
 8000290:	40020400 	.word	0x40020400

08000294 <GPIO_SDA_init>:

void GPIO_SDA_init(void) {
 8000294:	b580      	push	{r7, lr}
 8000296:	b084      	sub	sp, #16
 8000298:	af00      	add	r7, sp, #0
	GPIO_Handle_t sdaGPIO;

	sdaGPIO.pGPIOx = GPIOB;
 800029a:	4b09      	ldr	r3, [pc, #36]	; (80002c0 <GPIO_SDA_init+0x2c>)
 800029c:	607b      	str	r3, [r7, #4]
	sdaGPIO.GPIO_PinConfig.GPIO_PinNumber = SDA;
 800029e:	2305      	movs	r3, #5
 80002a0:	723b      	strb	r3, [r7, #8]
	sdaGPIO.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_OUT;
 80002a2:	2301      	movs	r3, #1
 80002a4:	727b      	strb	r3, [r7, #9]
	sdaGPIO.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_FAST;
 80002a6:	2302      	movs	r3, #2
 80002a8:	72bb      	strb	r3, [r7, #10]
	sdaGPIO.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_PIN_PU;
 80002aa:	2301      	movs	r3, #1
 80002ac:	72fb      	strb	r3, [r7, #11]

	GPIO_Init(&sdaGPIO);
 80002ae:	1d3b      	adds	r3, r7, #4
 80002b0:	4618      	mov	r0, r3
 80002b2:	f000 f9d7 	bl	8000664 <GPIO_Init>
}
 80002b6:	bf00      	nop
 80002b8:	3710      	adds	r7, #16
 80002ba:	46bd      	mov	sp, r7
 80002bc:	bd80      	pop	{r7, pc}
 80002be:	bf00      	nop
 80002c0:	40020400 	.word	0x40020400

080002c4 <i2c_start>:
/**************************************************************************************************************/
/*							Function Ver.2																	  */
/**************************************************************************************************************/
void i2c_start(void) {
 80002c4:	b580      	push	{r7, lr}
 80002c6:	af00      	add	r7, sp, #0
	 delay(2000);
	 GPIO_WriteToOutputPin(GPIOB, GPIO_PIN_NO_6, RESET);
	 delay(2000);
	 GPIO_WriteToOutputPin(GPIOB, GPIO_PIN_NO_5, SET);
	 */
	GPIO_WriteToOutputPin(GPIOB, SDA, RESET);
 80002c8:	2200      	movs	r2, #0
 80002ca:	2105      	movs	r1, #5
 80002cc:	4808      	ldr	r0, [pc, #32]	; (80002f0 <i2c_start+0x2c>)
 80002ce:	f000 fb7b 	bl	80009c8 <GPIO_WriteToOutputPin>
	delay(300);
 80002d2:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80002d6:	f7ff ff7f 	bl	80001d8 <delay>
	GPIO_WriteToOutputPin(GPIOB, SCL, RESET);
 80002da:	2200      	movs	r2, #0
 80002dc:	2104      	movs	r1, #4
 80002de:	4804      	ldr	r0, [pc, #16]	; (80002f0 <i2c_start+0x2c>)
 80002e0:	f000 fb72 	bl	80009c8 <GPIO_WriteToOutputPin>
	delay(150);
 80002e4:	2096      	movs	r0, #150	; 0x96
 80002e6:	f7ff ff77 	bl	80001d8 <delay>

}
 80002ea:	bf00      	nop
 80002ec:	bd80      	pop	{r7, pc}
 80002ee:	bf00      	nop
 80002f0:	40020400 	.word	0x40020400

080002f4 <i2c_stop>:
void i2c_stop(void) {
 80002f4:	b580      	push	{r7, lr}
 80002f6:	af00      	add	r7, sp, #0
	 delay(2000);
	 GPIO_WriteToOutputPin(GPIOB, GPIO_PIN_NO_5, SET);
	 delay(2000);
	 GPIO_WriteToOutputPin(GPIOB, GPIO_PIN_NO_6, SET);
	 */
	GPIO_WriteToOutputPin(GPIOB, SDA, SET);
 80002f8:	2201      	movs	r2, #1
 80002fa:	2105      	movs	r1, #5
 80002fc:	4808      	ldr	r0, [pc, #32]	; (8000320 <i2c_stop+0x2c>)
 80002fe:	f000 fb63 	bl	80009c8 <GPIO_WriteToOutputPin>
	delay(300);
 8000302:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8000306:	f7ff ff67 	bl	80001d8 <delay>
	GPIO_WriteToOutputPin(GPIOB, SCL, SET);
 800030a:	2201      	movs	r2, #1
 800030c:	2104      	movs	r1, #4
 800030e:	4804      	ldr	r0, [pc, #16]	; (8000320 <i2c_stop+0x2c>)
 8000310:	f000 fb5a 	bl	80009c8 <GPIO_WriteToOutputPin>
	delay(150);
 8000314:	2096      	movs	r0, #150	; 0x96
 8000316:	f7ff ff5f 	bl	80001d8 <delay>
}
 800031a:	bf00      	nop
 800031c:	bd80      	pop	{r7, pc}
 800031e:	bf00      	nop
 8000320:	40020400 	.word	0x40020400

08000324 <check_rwBit>:
void check_rwBit(uint8_t rwBit) {
 8000324:	b580      	push	{r7, lr}
 8000326:	b082      	sub	sp, #8
 8000328:	af00      	add	r7, sp, #0
 800032a:	4603      	mov	r3, r0
 800032c:	71fb      	strb	r3, [r7, #7]
	if (rwBit == 0)
 800032e:	79fb      	ldrb	r3, [r7, #7]
 8000330:	2b00      	cmp	r3, #0
 8000332:	d105      	bne.n	8000340 <check_rwBit+0x1c>
		GPIO_WriteToOutputPin(GPIOB, SDA, RESET);
 8000334:	2200      	movs	r2, #0
 8000336:	2105      	movs	r1, #5
 8000338:	480e      	ldr	r0, [pc, #56]	; (8000374 <check_rwBit+0x50>)
 800033a:	f000 fb45 	bl	80009c8 <GPIO_WriteToOutputPin>
 800033e:	e007      	b.n	8000350 <check_rwBit+0x2c>
	else if (rwBit == 1)
 8000340:	79fb      	ldrb	r3, [r7, #7]
 8000342:	2b01      	cmp	r3, #1
 8000344:	d104      	bne.n	8000350 <check_rwBit+0x2c>
		GPIO_WriteToOutputPin(GPIOB, SDA, SET);
 8000346:	2201      	movs	r2, #1
 8000348:	2105      	movs	r1, #5
 800034a:	480a      	ldr	r0, [pc, #40]	; (8000374 <check_rwBit+0x50>)
 800034c:	f000 fb3c 	bl	80009c8 <GPIO_WriteToOutputPin>

	GPIO_WriteToOutputPin(GPIOB, SCL, SET);
 8000350:	2201      	movs	r2, #1
 8000352:	2104      	movs	r1, #4
 8000354:	4807      	ldr	r0, [pc, #28]	; (8000374 <check_rwBit+0x50>)
 8000356:	f000 fb37 	bl	80009c8 <GPIO_WriteToOutputPin>
	delay(300);
 800035a:	f44f 7096 	mov.w	r0, #300	; 0x12c
 800035e:	f7ff ff3b 	bl	80001d8 <delay>
	GPIO_WriteToOutputPin(GPIOB, SCL, RESET);
 8000362:	2200      	movs	r2, #0
 8000364:	2104      	movs	r1, #4
 8000366:	4803      	ldr	r0, [pc, #12]	; (8000374 <check_rwBit+0x50>)
 8000368:	f000 fb2e 	bl	80009c8 <GPIO_WriteToOutputPin>

}
 800036c:	bf00      	nop
 800036e:	3708      	adds	r7, #8
 8000370:	46bd      	mov	sp, r7
 8000372:	bd80      	pop	{r7, pc}
 8000374:	40020400 	.word	0x40020400

08000378 <read_ack>:

void read_ack() {
 8000378:	b580      	push	{r7, lr}
 800037a:	af00      	add	r7, sp, #0
	reverse_IO(sdaGPIO);
 800037c:	4b10      	ldr	r3, [pc, #64]	; (80003c0 <read_ack+0x48>)
 800037e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8000382:	f7ff ff3f 	bl	8000204 <reverse_IO>
	delay(300);
 8000386:	f44f 7096 	mov.w	r0, #300	; 0x12c
 800038a:	f7ff ff25 	bl	80001d8 <delay>

	GPIO_WriteToOutputPin(GPIOB, SCL, SET);
 800038e:	2201      	movs	r2, #1
 8000390:	2104      	movs	r1, #4
 8000392:	480c      	ldr	r0, [pc, #48]	; (80003c4 <read_ack+0x4c>)
 8000394:	f000 fb18 	bl	80009c8 <GPIO_WriteToOutputPin>
	delay(300);
 8000398:	f44f 7096 	mov.w	r0, #300	; 0x12c
 800039c:	f7ff ff1c 	bl	80001d8 <delay>
	GPIO_WriteToOutputPin(GPIOB, SCL, RESET);
 80003a0:	2200      	movs	r2, #0
 80003a2:	2104      	movs	r1, #4
 80003a4:	4807      	ldr	r0, [pc, #28]	; (80003c4 <read_ack+0x4c>)
 80003a6:	f000 fb0f 	bl	80009c8 <GPIO_WriteToOutputPin>
	delay(300);
 80003aa:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80003ae:	f7ff ff13 	bl	80001d8 <delay>
	reverse_IO(sdaGPIO);
 80003b2:	4b03      	ldr	r3, [pc, #12]	; (80003c0 <read_ack+0x48>)
 80003b4:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80003b8:	f7ff ff24 	bl	8000204 <reverse_IO>
}
 80003bc:	bf00      	nop
 80003be:	bd80      	pop	{r7, pc}
 80003c0:	2000001c 	.word	0x2000001c
 80003c4:	40020400 	.word	0x40020400

080003c8 <send>:

void send(uint8_t data) {
 80003c8:	b580      	push	{r7, lr}
 80003ca:	b084      	sub	sp, #16
 80003cc:	af00      	add	r7, sp, #0
 80003ce:	4603      	mov	r3, r0
 80003d0:	71fb      	strb	r3, [r7, #7]
	int idx;
	for (idx = 0; idx < 8; idx++) {
 80003d2:	2300      	movs	r3, #0
 80003d4:	60fb      	str	r3, [r7, #12]
 80003d6:	e029      	b.n	800042c <send+0x64>
		if (((data >> (7 - idx)) & 0x1) == 1) {
 80003d8:	79fa      	ldrb	r2, [r7, #7]
 80003da:	68fb      	ldr	r3, [r7, #12]
 80003dc:	f1c3 0307 	rsb	r3, r3, #7
 80003e0:	fa42 f303 	asr.w	r3, r2, r3
 80003e4:	f003 0301 	and.w	r3, r3, #1
 80003e8:	2b00      	cmp	r3, #0
 80003ea:	d005      	beq.n	80003f8 <send+0x30>
			GPIO_WriteToOutputPin(GPIOB, SDA, SET);
 80003ec:	2201      	movs	r2, #1
 80003ee:	2105      	movs	r1, #5
 80003f0:	4813      	ldr	r0, [pc, #76]	; (8000440 <send+0x78>)
 80003f2:	f000 fae9 	bl	80009c8 <GPIO_WriteToOutputPin>
 80003f6:	e004      	b.n	8000402 <send+0x3a>
		} else {
			GPIO_WriteToOutputPin(GPIOB, SDA, SET);
 80003f8:	2201      	movs	r2, #1
 80003fa:	2105      	movs	r1, #5
 80003fc:	4810      	ldr	r0, [pc, #64]	; (8000440 <send+0x78>)
 80003fe:	f000 fae3 	bl	80009c8 <GPIO_WriteToOutputPin>
		}
		GPIO_WriteToOutputPin(GPIOB, SCL, SET);
 8000402:	2201      	movs	r2, #1
 8000404:	2104      	movs	r1, #4
 8000406:	480e      	ldr	r0, [pc, #56]	; (8000440 <send+0x78>)
 8000408:	f000 fade 	bl	80009c8 <GPIO_WriteToOutputPin>
		delay(300);
 800040c:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8000410:	f7ff fee2 	bl	80001d8 <delay>
		GPIO_WriteToOutputPin(GPIOB, SCL, RESET);
 8000414:	2200      	movs	r2, #0
 8000416:	2104      	movs	r1, #4
 8000418:	4809      	ldr	r0, [pc, #36]	; (8000440 <send+0x78>)
 800041a:	f000 fad5 	bl	80009c8 <GPIO_WriteToOutputPin>
		delay(300);
 800041e:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8000422:	f7ff fed9 	bl	80001d8 <delay>
	for (idx = 0; idx < 8; idx++) {
 8000426:	68fb      	ldr	r3, [r7, #12]
 8000428:	3301      	adds	r3, #1
 800042a:	60fb      	str	r3, [r7, #12]
 800042c:	68fb      	ldr	r3, [r7, #12]
 800042e:	2b07      	cmp	r3, #7
 8000430:	ddd2      	ble.n	80003d8 <send+0x10>
	}
	read_ack();
 8000432:	f7ff ffa1 	bl	8000378 <read_ack>
}
 8000436:	bf00      	nop
 8000438:	3710      	adds	r7, #16
 800043a:	46bd      	mov	sp, r7
 800043c:	bd80      	pop	{r7, pc}
 800043e:	bf00      	nop
 8000440:	40020400 	.word	0x40020400

08000444 <send_addr>:

void send_addr(uint8_t addr) {
 8000444:	b580      	push	{r7, lr}
 8000446:	b084      	sub	sp, #16
 8000448:	af00      	add	r7, sp, #0
 800044a:	4603      	mov	r3, r0
 800044c:	71fb      	strb	r3, [r7, #7]
	int idx;
	for (idx = 1; idx < 8; idx++) {
 800044e:	2301      	movs	r3, #1
 8000450:	60fb      	str	r3, [r7, #12]
 8000452:	e029      	b.n	80004a8 <send_addr+0x64>
		if (((addr >> (7 - idx)) & 0x1) == 1) {
 8000454:	79fa      	ldrb	r2, [r7, #7]
 8000456:	68fb      	ldr	r3, [r7, #12]
 8000458:	f1c3 0307 	rsb	r3, r3, #7
 800045c:	fa42 f303 	asr.w	r3, r2, r3
 8000460:	f003 0301 	and.w	r3, r3, #1
 8000464:	2b00      	cmp	r3, #0
 8000466:	d005      	beq.n	8000474 <send_addr+0x30>
			GPIO_WriteToOutputPin(GPIOB, SDA, SET);
 8000468:	2201      	movs	r2, #1
 800046a:	2105      	movs	r1, #5
 800046c:	4814      	ldr	r0, [pc, #80]	; (80004c0 <send_addr+0x7c>)
 800046e:	f000 faab 	bl	80009c8 <GPIO_WriteToOutputPin>
 8000472:	e004      	b.n	800047e <send_addr+0x3a>
		} else {
			GPIO_WriteToOutputPin(GPIOB, SDA, RESET);
 8000474:	2200      	movs	r2, #0
 8000476:	2105      	movs	r1, #5
 8000478:	4811      	ldr	r0, [pc, #68]	; (80004c0 <send_addr+0x7c>)
 800047a:	f000 faa5 	bl	80009c8 <GPIO_WriteToOutputPin>
		}
		GPIO_WriteToOutputPin(GPIOB, SCL, SET);
 800047e:	2201      	movs	r2, #1
 8000480:	2104      	movs	r1, #4
 8000482:	480f      	ldr	r0, [pc, #60]	; (80004c0 <send_addr+0x7c>)
 8000484:	f000 faa0 	bl	80009c8 <GPIO_WriteToOutputPin>
		delay(300);
 8000488:	f44f 7096 	mov.w	r0, #300	; 0x12c
 800048c:	f7ff fea4 	bl	80001d8 <delay>
		GPIO_WriteToOutputPin(GPIOB, SCL, RESET);
 8000490:	2200      	movs	r2, #0
 8000492:	2104      	movs	r1, #4
 8000494:	480a      	ldr	r0, [pc, #40]	; (80004c0 <send_addr+0x7c>)
 8000496:	f000 fa97 	bl	80009c8 <GPIO_WriteToOutputPin>
		delay(300);
 800049a:	f44f 7096 	mov.w	r0, #300	; 0x12c
 800049e:	f7ff fe9b 	bl	80001d8 <delay>
	for (idx = 1; idx < 8; idx++) {
 80004a2:	68fb      	ldr	r3, [r7, #12]
 80004a4:	3301      	adds	r3, #1
 80004a6:	60fb      	str	r3, [r7, #12]
 80004a8:	68fb      	ldr	r3, [r7, #12]
 80004aa:	2b07      	cmp	r3, #7
 80004ac:	ddd2      	ble.n	8000454 <send_addr+0x10>
	}
	check_rwBit(0);
 80004ae:	2000      	movs	r0, #0
 80004b0:	f7ff ff38 	bl	8000324 <check_rwBit>
	read_ack();
 80004b4:	f7ff ff60 	bl	8000378 <read_ack>
}
 80004b8:	bf00      	nop
 80004ba:	3710      	adds	r7, #16
 80004bc:	46bd      	mov	sp, r7
 80004be:	bd80      	pop	{r7, pc}
 80004c0:	40020400 	.word	0x40020400

080004c4 <send_data_protocol>:

void send_data_protocol(uint8_t slave_addr) {
 80004c4:	b580      	push	{r7, lr}
 80004c6:	b082      	sub	sp, #8
 80004c8:	af00      	add	r7, sp, #0
 80004ca:	4603      	mov	r3, r0
 80004cc:	71fb      	strb	r3, [r7, #7]
	i2c_start();
 80004ce:	f7ff fef9 	bl	80002c4 <i2c_start>

	send_addr(slave_addr);
 80004d2:	79fb      	ldrb	r3, [r7, #7]
 80004d4:	4618      	mov	r0, r3
 80004d6:	f7ff ffb5 	bl	8000444 <send_addr>
	send(0x41);
 80004da:	2041      	movs	r0, #65	; 0x41
 80004dc:	f7ff ff74 	bl	80003c8 <send>
	send(0x42);
 80004e0:	2042      	movs	r0, #66	; 0x42
 80004e2:	f7ff ff71 	bl	80003c8 <send>
	send(0x43);
 80004e6:	2043      	movs	r0, #67	; 0x43
 80004e8:	f7ff ff6e 	bl	80003c8 <send>

	i2c_stop();
 80004ec:	f7ff ff02 	bl	80002f4 <i2c_stop>
}
 80004f0:	bf00      	nop
 80004f2:	3708      	adds	r7, #8
 80004f4:	46bd      	mov	sp, r7
 80004f6:	bd80      	pop	{r7, pc}

080004f8 <main>:
	GPIO_WriteToOutputPin(GPIOB, GPIO_PIN_NO_6, SET);

	return data;
}

int main(void) {
 80004f8:	b580      	push	{r7, lr}
 80004fa:	b082      	sub	sp, #8
 80004fc:	af00      	add	r7, sp, #0
//		delay(2000);
//		//send some data to the slave
//		I2C_MasterSendData(&I2C1Handle,some_data,strlen((char*)some_data),SLAVE_ADDR,0);
//	}
	/************************************************************************************************/
	GPIO_ButtonInit();
 80004fe:	f7ff fe99 	bl	8000234 <GPIO_ButtonInit>

	//unsigned char input = 0x55;

	/*Set the Idel state*/
	GPIO_SCL_init();
 8000502:	f7ff feaf 	bl	8000264 <GPIO_SCL_init>
	GPIO_SDA_init();
 8000506:	f7ff fec5 	bl	8000294 <GPIO_SDA_init>
	GPIO_WriteToOutputPin(GPIOB, SDA, SET);
 800050a:	2201      	movs	r2, #1
 800050c:	2105      	movs	r1, #5
 800050e:	4810      	ldr	r0, [pc, #64]	; (8000550 <main+0x58>)
 8000510:	f000 fa5a 	bl	80009c8 <GPIO_WriteToOutputPin>
	GPIO_WriteToOutputPin(GPIOB, SCL, SET);
 8000514:	2201      	movs	r2, #1
 8000516:	2104      	movs	r1, #4
 8000518:	480d      	ldr	r0, [pc, #52]	; (8000550 <main+0x58>)
 800051a:	f000 fa55 	bl	80009c8 <GPIO_WriteToOutputPin>

	int btn_pr;
	int btn_tim = 0;
 800051e:	2300      	movs	r3, #0
 8000520:	607b      	str	r3, [r7, #4]
//
//		i2c_write(SLAVE_ADDR);
//		delay(2000);
//		i2c_write(input);
//		i2c_stop();
		btn_pr = GPIO_ReadFromInputPin(GPIOC, GPIO_PIN_NO_13);
 8000522:	210d      	movs	r1, #13
 8000524:	480b      	ldr	r0, [pc, #44]	; (8000554 <main+0x5c>)
 8000526:	f000 fa39 	bl	800099c <GPIO_ReadFromInputPin>
 800052a:	4603      	mov	r3, r0
 800052c:	603b      	str	r3, [r7, #0]


		if (btn_pr != 0) {
 800052e:	683b      	ldr	r3, [r7, #0]
 8000530:	2b00      	cmp	r3, #0
 8000532:	d003      	beq.n	800053c <main+0x44>
			btn_tim++;
 8000534:	687b      	ldr	r3, [r7, #4]
 8000536:	3301      	adds	r3, #1
 8000538:	607b      	str	r3, [r7, #4]
 800053a:	e7f2      	b.n	8000522 <main+0x2a>
		} else if (btn_pr == 0) {
 800053c:	683b      	ldr	r3, [r7, #0]
 800053e:	2b00      	cmp	r3, #0
 8000540:	d1ef      	bne.n	8000522 <main+0x2a>
			send_data_protocol(SLAVE_ADDR);
 8000542:	2068      	movs	r0, #104	; 0x68
 8000544:	f7ff ffbe 	bl	80004c4 <send_data_protocol>
			btn_pr = 0;
 8000548:	2300      	movs	r3, #0
 800054a:	603b      	str	r3, [r7, #0]
		btn_pr = GPIO_ReadFromInputPin(GPIOC, GPIO_PIN_NO_13);
 800054c:	e7e9      	b.n	8000522 <main+0x2a>
 800054e:	bf00      	nop
 8000550:	40020400 	.word	0x40020400
 8000554:	40020800 	.word	0x40020800

08000558 <GPIO_PeriClockControl>:
 *
 * @Note              -  none

 */
void GPIO_PeriClockControl(GPIO_RegDef_t *pGPIOx, uint8_t EnorDi)
{
 8000558:	b480      	push	{r7}
 800055a:	b083      	sub	sp, #12
 800055c:	af00      	add	r7, sp, #0
 800055e:	6078      	str	r0, [r7, #4]
 8000560:	460b      	mov	r3, r1
 8000562:	70fb      	strb	r3, [r7, #3]
	if(EnorDi == ENABLE)
 8000564:	78fb      	ldrb	r3, [r7, #3]
 8000566:	2b01      	cmp	r3, #1
 8000568:	d161      	bne.n	800062e <GPIO_PeriClockControl+0xd6>
	{
		if(pGPIOx == GPIOA)
 800056a:	687b      	ldr	r3, [r7, #4]
 800056c:	4a33      	ldr	r2, [pc, #204]	; (800063c <GPIO_PeriClockControl+0xe4>)
 800056e:	4293      	cmp	r3, r2
 8000570:	d106      	bne.n	8000580 <GPIO_PeriClockControl+0x28>
		{
			GPIOA_PCLK_EN();
 8000572:	4b33      	ldr	r3, [pc, #204]	; (8000640 <GPIO_PeriClockControl+0xe8>)
 8000574:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000576:	4a32      	ldr	r2, [pc, #200]	; (8000640 <GPIO_PeriClockControl+0xe8>)
 8000578:	f043 0301 	orr.w	r3, r3, #1
 800057c:	6313      	str	r3, [r2, #48]	; 0x30
	else
	{
		//TODO
	}

}
 800057e:	e056      	b.n	800062e <GPIO_PeriClockControl+0xd6>
		}else if (pGPIOx == GPIOB)
 8000580:	687b      	ldr	r3, [r7, #4]
 8000582:	4a30      	ldr	r2, [pc, #192]	; (8000644 <GPIO_PeriClockControl+0xec>)
 8000584:	4293      	cmp	r3, r2
 8000586:	d106      	bne.n	8000596 <GPIO_PeriClockControl+0x3e>
			GPIOB_PCLK_EN();
 8000588:	4b2d      	ldr	r3, [pc, #180]	; (8000640 <GPIO_PeriClockControl+0xe8>)
 800058a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800058c:	4a2c      	ldr	r2, [pc, #176]	; (8000640 <GPIO_PeriClockControl+0xe8>)
 800058e:	f043 0302 	orr.w	r3, r3, #2
 8000592:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000594:	e04b      	b.n	800062e <GPIO_PeriClockControl+0xd6>
		}else if (pGPIOx == GPIOC)
 8000596:	687b      	ldr	r3, [r7, #4]
 8000598:	4a2b      	ldr	r2, [pc, #172]	; (8000648 <GPIO_PeriClockControl+0xf0>)
 800059a:	4293      	cmp	r3, r2
 800059c:	d106      	bne.n	80005ac <GPIO_PeriClockControl+0x54>
			GPIOC_PCLK_EN();
 800059e:	4b28      	ldr	r3, [pc, #160]	; (8000640 <GPIO_PeriClockControl+0xe8>)
 80005a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005a2:	4a27      	ldr	r2, [pc, #156]	; (8000640 <GPIO_PeriClockControl+0xe8>)
 80005a4:	f043 0304 	orr.w	r3, r3, #4
 80005a8:	6313      	str	r3, [r2, #48]	; 0x30
}
 80005aa:	e040      	b.n	800062e <GPIO_PeriClockControl+0xd6>
		}else if (pGPIOx == GPIOD)
 80005ac:	687b      	ldr	r3, [r7, #4]
 80005ae:	4a27      	ldr	r2, [pc, #156]	; (800064c <GPIO_PeriClockControl+0xf4>)
 80005b0:	4293      	cmp	r3, r2
 80005b2:	d106      	bne.n	80005c2 <GPIO_PeriClockControl+0x6a>
			GPIOD_PCLK_EN();
 80005b4:	4b22      	ldr	r3, [pc, #136]	; (8000640 <GPIO_PeriClockControl+0xe8>)
 80005b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005b8:	4a21      	ldr	r2, [pc, #132]	; (8000640 <GPIO_PeriClockControl+0xe8>)
 80005ba:	f043 0308 	orr.w	r3, r3, #8
 80005be:	6313      	str	r3, [r2, #48]	; 0x30
}
 80005c0:	e035      	b.n	800062e <GPIO_PeriClockControl+0xd6>
		}else if (pGPIOx == GPIOE)
 80005c2:	687b      	ldr	r3, [r7, #4]
 80005c4:	4a22      	ldr	r2, [pc, #136]	; (8000650 <GPIO_PeriClockControl+0xf8>)
 80005c6:	4293      	cmp	r3, r2
 80005c8:	d106      	bne.n	80005d8 <GPIO_PeriClockControl+0x80>
			GPIOE_PCLK_EN();
 80005ca:	4b1d      	ldr	r3, [pc, #116]	; (8000640 <GPIO_PeriClockControl+0xe8>)
 80005cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005ce:	4a1c      	ldr	r2, [pc, #112]	; (8000640 <GPIO_PeriClockControl+0xe8>)
 80005d0:	f043 0310 	orr.w	r3, r3, #16
 80005d4:	6313      	str	r3, [r2, #48]	; 0x30
}
 80005d6:	e02a      	b.n	800062e <GPIO_PeriClockControl+0xd6>
		}else if (pGPIOx == GPIOF)
 80005d8:	687b      	ldr	r3, [r7, #4]
 80005da:	4a1e      	ldr	r2, [pc, #120]	; (8000654 <GPIO_PeriClockControl+0xfc>)
 80005dc:	4293      	cmp	r3, r2
 80005de:	d106      	bne.n	80005ee <GPIO_PeriClockControl+0x96>
			GPIOF_PCLK_EN();
 80005e0:	4b17      	ldr	r3, [pc, #92]	; (8000640 <GPIO_PeriClockControl+0xe8>)
 80005e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005e4:	4a16      	ldr	r2, [pc, #88]	; (8000640 <GPIO_PeriClockControl+0xe8>)
 80005e6:	f043 0320 	orr.w	r3, r3, #32
 80005ea:	6313      	str	r3, [r2, #48]	; 0x30
}
 80005ec:	e01f      	b.n	800062e <GPIO_PeriClockControl+0xd6>
		}else if (pGPIOx == GPIOG)
 80005ee:	687b      	ldr	r3, [r7, #4]
 80005f0:	4a19      	ldr	r2, [pc, #100]	; (8000658 <GPIO_PeriClockControl+0x100>)
 80005f2:	4293      	cmp	r3, r2
 80005f4:	d106      	bne.n	8000604 <GPIO_PeriClockControl+0xac>
			GPIOG_PCLK_EN();
 80005f6:	4b12      	ldr	r3, [pc, #72]	; (8000640 <GPIO_PeriClockControl+0xe8>)
 80005f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005fa:	4a11      	ldr	r2, [pc, #68]	; (8000640 <GPIO_PeriClockControl+0xe8>)
 80005fc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000600:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000602:	e014      	b.n	800062e <GPIO_PeriClockControl+0xd6>
		}else if (pGPIOx == GPIOH)
 8000604:	687b      	ldr	r3, [r7, #4]
 8000606:	4a15      	ldr	r2, [pc, #84]	; (800065c <GPIO_PeriClockControl+0x104>)
 8000608:	4293      	cmp	r3, r2
 800060a:	d106      	bne.n	800061a <GPIO_PeriClockControl+0xc2>
			GPIOH_PCLK_EN();
 800060c:	4b0c      	ldr	r3, [pc, #48]	; (8000640 <GPIO_PeriClockControl+0xe8>)
 800060e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000610:	4a0b      	ldr	r2, [pc, #44]	; (8000640 <GPIO_PeriClockControl+0xe8>)
 8000612:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000616:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000618:	e009      	b.n	800062e <GPIO_PeriClockControl+0xd6>
		}else if (pGPIOx == GPIOI)
 800061a:	687b      	ldr	r3, [r7, #4]
 800061c:	4a10      	ldr	r2, [pc, #64]	; (8000660 <GPIO_PeriClockControl+0x108>)
 800061e:	4293      	cmp	r3, r2
 8000620:	d105      	bne.n	800062e <GPIO_PeriClockControl+0xd6>
			GPIOI_PCLK_EN();
 8000622:	4b07      	ldr	r3, [pc, #28]	; (8000640 <GPIO_PeriClockControl+0xe8>)
 8000624:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000626:	4a06      	ldr	r2, [pc, #24]	; (8000640 <GPIO_PeriClockControl+0xe8>)
 8000628:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800062c:	6313      	str	r3, [r2, #48]	; 0x30
}
 800062e:	bf00      	nop
 8000630:	370c      	adds	r7, #12
 8000632:	46bd      	mov	sp, r7
 8000634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000638:	4770      	bx	lr
 800063a:	bf00      	nop
 800063c:	40020000 	.word	0x40020000
 8000640:	40023800 	.word	0x40023800
 8000644:	40020400 	.word	0x40020400
 8000648:	40020800 	.word	0x40020800
 800064c:	40020c00 	.word	0x40020c00
 8000650:	40021000 	.word	0x40021000
 8000654:	40021400 	.word	0x40021400
 8000658:	40021800 	.word	0x40021800
 800065c:	40021c00 	.word	0x40021c00
 8000660:	40022000 	.word	0x40022000

08000664 <GPIO_Init>:
 *
 * @Note              -

 */
void GPIO_Init(GPIO_Handle_t *pGPIOHandle)
{
 8000664:	b580      	push	{r7, lr}
 8000666:	b086      	sub	sp, #24
 8000668:	af00      	add	r7, sp, #0
 800066a:	6078      	str	r0, [r7, #4]
	 uint32_t temp=0; //temp. register
 800066c:	2300      	movs	r3, #0
 800066e:	617b      	str	r3, [r7, #20]

	 //enable the peripheral clock

	 GPIO_PeriClockControl(pGPIOHandle->pGPIOx, ENABLE);
 8000670:	687b      	ldr	r3, [r7, #4]
 8000672:	681b      	ldr	r3, [r3, #0]
 8000674:	2101      	movs	r1, #1
 8000676:	4618      	mov	r0, r3
 8000678:	f7ff ff6e 	bl	8000558 <GPIO_PeriClockControl>

	//1 . configure the mode of gpio pin

	if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode <= GPIO_MODE_ANALOG)
 800067c:	687b      	ldr	r3, [r7, #4]
 800067e:	795b      	ldrb	r3, [r3, #5]
 8000680:	2b03      	cmp	r3, #3
 8000682:	d820      	bhi.n	80006c6 <GPIO_Init+0x62>
	{
		//the non interrupt mode
		temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber ) );
 8000684:	687b      	ldr	r3, [r7, #4]
 8000686:	795b      	ldrb	r3, [r3, #5]
 8000688:	461a      	mov	r2, r3
 800068a:	687b      	ldr	r3, [r7, #4]
 800068c:	791b      	ldrb	r3, [r3, #4]
 800068e:	005b      	lsls	r3, r3, #1
 8000690:	fa02 f303 	lsl.w	r3, r2, r3
 8000694:	617b      	str	r3, [r7, #20]
		pGPIOHandle->pGPIOx->MODER &= ~( 0x3 << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber)); //clearing
 8000696:	687b      	ldr	r3, [r7, #4]
 8000698:	681b      	ldr	r3, [r3, #0]
 800069a:	681a      	ldr	r2, [r3, #0]
 800069c:	687b      	ldr	r3, [r7, #4]
 800069e:	791b      	ldrb	r3, [r3, #4]
 80006a0:	005b      	lsls	r3, r3, #1
 80006a2:	2103      	movs	r1, #3
 80006a4:	fa01 f303 	lsl.w	r3, r1, r3
 80006a8:	43db      	mvns	r3, r3
 80006aa:	4619      	mov	r1, r3
 80006ac:	687b      	ldr	r3, [r7, #4]
 80006ae:	681b      	ldr	r3, [r3, #0]
 80006b0:	400a      	ands	r2, r1
 80006b2:	601a      	str	r2, [r3, #0]
		pGPIOHandle->pGPIOx->MODER |= temp; //setting
 80006b4:	687b      	ldr	r3, [r7, #4]
 80006b6:	681b      	ldr	r3, [r3, #0]
 80006b8:	6819      	ldr	r1, [r3, #0]
 80006ba:	687b      	ldr	r3, [r7, #4]
 80006bc:	681b      	ldr	r3, [r3, #0]
 80006be:	697a      	ldr	r2, [r7, #20]
 80006c0:	430a      	orrs	r2, r1
 80006c2:	601a      	str	r2, [r3, #0]
 80006c4:	e0cb      	b.n	800085e <GPIO_Init+0x1fa>

	}else
	{
		//this part will code later . ( interrupt mode)
		if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode ==GPIO_MODE_IT_FT )
 80006c6:	687b      	ldr	r3, [r7, #4]
 80006c8:	795b      	ldrb	r3, [r3, #5]
 80006ca:	2b04      	cmp	r3, #4
 80006cc:	d117      	bne.n	80006fe <GPIO_Init+0x9a>
		{
			//1. configure the FTSR
			EXTI->FTSR |= ( 1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80006ce:	4b4b      	ldr	r3, [pc, #300]	; (80007fc <GPIO_Init+0x198>)
 80006d0:	68db      	ldr	r3, [r3, #12]
 80006d2:	687a      	ldr	r2, [r7, #4]
 80006d4:	7912      	ldrb	r2, [r2, #4]
 80006d6:	4611      	mov	r1, r2
 80006d8:	2201      	movs	r2, #1
 80006da:	408a      	lsls	r2, r1
 80006dc:	4611      	mov	r1, r2
 80006de:	4a47      	ldr	r2, [pc, #284]	; (80007fc <GPIO_Init+0x198>)
 80006e0:	430b      	orrs	r3, r1
 80006e2:	60d3      	str	r3, [r2, #12]
			//Clear the corresponding RTSR bit
			EXTI->RTSR &= ~( 1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80006e4:	4b45      	ldr	r3, [pc, #276]	; (80007fc <GPIO_Init+0x198>)
 80006e6:	689b      	ldr	r3, [r3, #8]
 80006e8:	687a      	ldr	r2, [r7, #4]
 80006ea:	7912      	ldrb	r2, [r2, #4]
 80006ec:	4611      	mov	r1, r2
 80006ee:	2201      	movs	r2, #1
 80006f0:	408a      	lsls	r2, r1
 80006f2:	43d2      	mvns	r2, r2
 80006f4:	4611      	mov	r1, r2
 80006f6:	4a41      	ldr	r2, [pc, #260]	; (80007fc <GPIO_Init+0x198>)
 80006f8:	400b      	ands	r3, r1
 80006fa:	6093      	str	r3, [r2, #8]
 80006fc:	e035      	b.n	800076a <GPIO_Init+0x106>

		}else if (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode ==GPIO_MODE_IT_RT )
 80006fe:	687b      	ldr	r3, [r7, #4]
 8000700:	795b      	ldrb	r3, [r3, #5]
 8000702:	2b05      	cmp	r3, #5
 8000704:	d117      	bne.n	8000736 <GPIO_Init+0xd2>
		{
			//1 . configure the RTSR
			EXTI->RTSR |= ( 1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000706:	4b3d      	ldr	r3, [pc, #244]	; (80007fc <GPIO_Init+0x198>)
 8000708:	689b      	ldr	r3, [r3, #8]
 800070a:	687a      	ldr	r2, [r7, #4]
 800070c:	7912      	ldrb	r2, [r2, #4]
 800070e:	4611      	mov	r1, r2
 8000710:	2201      	movs	r2, #1
 8000712:	408a      	lsls	r2, r1
 8000714:	4611      	mov	r1, r2
 8000716:	4a39      	ldr	r2, [pc, #228]	; (80007fc <GPIO_Init+0x198>)
 8000718:	430b      	orrs	r3, r1
 800071a:	6093      	str	r3, [r2, #8]
			//Clear the corresponding RTSR bit
			EXTI->FTSR &= ~( 1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 800071c:	4b37      	ldr	r3, [pc, #220]	; (80007fc <GPIO_Init+0x198>)
 800071e:	68db      	ldr	r3, [r3, #12]
 8000720:	687a      	ldr	r2, [r7, #4]
 8000722:	7912      	ldrb	r2, [r2, #4]
 8000724:	4611      	mov	r1, r2
 8000726:	2201      	movs	r2, #1
 8000728:	408a      	lsls	r2, r1
 800072a:	43d2      	mvns	r2, r2
 800072c:	4611      	mov	r1, r2
 800072e:	4a33      	ldr	r2, [pc, #204]	; (80007fc <GPIO_Init+0x198>)
 8000730:	400b      	ands	r3, r1
 8000732:	60d3      	str	r3, [r2, #12]
 8000734:	e019      	b.n	800076a <GPIO_Init+0x106>

		}else if (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_RFT )
 8000736:	687b      	ldr	r3, [r7, #4]
 8000738:	795b      	ldrb	r3, [r3, #5]
 800073a:	2b06      	cmp	r3, #6
 800073c:	d115      	bne.n	800076a <GPIO_Init+0x106>
		{
			//1. configure both FTSR and RTSR
			EXTI->RTSR |= ( 1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 800073e:	4b2f      	ldr	r3, [pc, #188]	; (80007fc <GPIO_Init+0x198>)
 8000740:	689b      	ldr	r3, [r3, #8]
 8000742:	687a      	ldr	r2, [r7, #4]
 8000744:	7912      	ldrb	r2, [r2, #4]
 8000746:	4611      	mov	r1, r2
 8000748:	2201      	movs	r2, #1
 800074a:	408a      	lsls	r2, r1
 800074c:	4611      	mov	r1, r2
 800074e:	4a2b      	ldr	r2, [pc, #172]	; (80007fc <GPIO_Init+0x198>)
 8000750:	430b      	orrs	r3, r1
 8000752:	6093      	str	r3, [r2, #8]
			//Clear the corresponding RTSR bit
			EXTI->FTSR |= ( 1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000754:	4b29      	ldr	r3, [pc, #164]	; (80007fc <GPIO_Init+0x198>)
 8000756:	68db      	ldr	r3, [r3, #12]
 8000758:	687a      	ldr	r2, [r7, #4]
 800075a:	7912      	ldrb	r2, [r2, #4]
 800075c:	4611      	mov	r1, r2
 800075e:	2201      	movs	r2, #1
 8000760:	408a      	lsls	r2, r1
 8000762:	4611      	mov	r1, r2
 8000764:	4a25      	ldr	r2, [pc, #148]	; (80007fc <GPIO_Init+0x198>)
 8000766:	430b      	orrs	r3, r1
 8000768:	60d3      	str	r3, [r2, #12]
		}

		//2. configure the GPIO port selection in SYSCFG_EXTICR
		uint8_t temp1 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber / 4 ;
 800076a:	687b      	ldr	r3, [r7, #4]
 800076c:	791b      	ldrb	r3, [r3, #4]
 800076e:	089b      	lsrs	r3, r3, #2
 8000770:	74fb      	strb	r3, [r7, #19]
		uint8_t temp2 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber % 4;
 8000772:	687b      	ldr	r3, [r7, #4]
 8000774:	791b      	ldrb	r3, [r3, #4]
 8000776:	f003 0303 	and.w	r3, r3, #3
 800077a:	74bb      	strb	r3, [r7, #18]
		uint8_t portcode = GPIO_BASEADDR_TO_CODE(pGPIOHandle->pGPIOx);
 800077c:	687b      	ldr	r3, [r7, #4]
 800077e:	681b      	ldr	r3, [r3, #0]
 8000780:	4a1f      	ldr	r2, [pc, #124]	; (8000800 <GPIO_Init+0x19c>)
 8000782:	4293      	cmp	r3, r2
 8000784:	d04e      	beq.n	8000824 <GPIO_Init+0x1c0>
 8000786:	687b      	ldr	r3, [r7, #4]
 8000788:	681b      	ldr	r3, [r3, #0]
 800078a:	4a1e      	ldr	r2, [pc, #120]	; (8000804 <GPIO_Init+0x1a0>)
 800078c:	4293      	cmp	r3, r2
 800078e:	d032      	beq.n	80007f6 <GPIO_Init+0x192>
 8000790:	687b      	ldr	r3, [r7, #4]
 8000792:	681b      	ldr	r3, [r3, #0]
 8000794:	4a1c      	ldr	r2, [pc, #112]	; (8000808 <GPIO_Init+0x1a4>)
 8000796:	4293      	cmp	r3, r2
 8000798:	d02b      	beq.n	80007f2 <GPIO_Init+0x18e>
 800079a:	687b      	ldr	r3, [r7, #4]
 800079c:	681b      	ldr	r3, [r3, #0]
 800079e:	4a1b      	ldr	r2, [pc, #108]	; (800080c <GPIO_Init+0x1a8>)
 80007a0:	4293      	cmp	r3, r2
 80007a2:	d024      	beq.n	80007ee <GPIO_Init+0x18a>
 80007a4:	687b      	ldr	r3, [r7, #4]
 80007a6:	681b      	ldr	r3, [r3, #0]
 80007a8:	4a19      	ldr	r2, [pc, #100]	; (8000810 <GPIO_Init+0x1ac>)
 80007aa:	4293      	cmp	r3, r2
 80007ac:	d01d      	beq.n	80007ea <GPIO_Init+0x186>
 80007ae:	687b      	ldr	r3, [r7, #4]
 80007b0:	681b      	ldr	r3, [r3, #0]
 80007b2:	4a18      	ldr	r2, [pc, #96]	; (8000814 <GPIO_Init+0x1b0>)
 80007b4:	4293      	cmp	r3, r2
 80007b6:	d016      	beq.n	80007e6 <GPIO_Init+0x182>
 80007b8:	687b      	ldr	r3, [r7, #4]
 80007ba:	681b      	ldr	r3, [r3, #0]
 80007bc:	4a16      	ldr	r2, [pc, #88]	; (8000818 <GPIO_Init+0x1b4>)
 80007be:	4293      	cmp	r3, r2
 80007c0:	d00f      	beq.n	80007e2 <GPIO_Init+0x17e>
 80007c2:	687b      	ldr	r3, [r7, #4]
 80007c4:	681b      	ldr	r3, [r3, #0]
 80007c6:	4a15      	ldr	r2, [pc, #84]	; (800081c <GPIO_Init+0x1b8>)
 80007c8:	4293      	cmp	r3, r2
 80007ca:	d008      	beq.n	80007de <GPIO_Init+0x17a>
 80007cc:	687b      	ldr	r3, [r7, #4]
 80007ce:	681b      	ldr	r3, [r3, #0]
 80007d0:	4a13      	ldr	r2, [pc, #76]	; (8000820 <GPIO_Init+0x1bc>)
 80007d2:	4293      	cmp	r3, r2
 80007d4:	d101      	bne.n	80007da <GPIO_Init+0x176>
 80007d6:	2308      	movs	r3, #8
 80007d8:	e025      	b.n	8000826 <GPIO_Init+0x1c2>
 80007da:	2300      	movs	r3, #0
 80007dc:	e023      	b.n	8000826 <GPIO_Init+0x1c2>
 80007de:	2307      	movs	r3, #7
 80007e0:	e021      	b.n	8000826 <GPIO_Init+0x1c2>
 80007e2:	2306      	movs	r3, #6
 80007e4:	e01f      	b.n	8000826 <GPIO_Init+0x1c2>
 80007e6:	2305      	movs	r3, #5
 80007e8:	e01d      	b.n	8000826 <GPIO_Init+0x1c2>
 80007ea:	2304      	movs	r3, #4
 80007ec:	e01b      	b.n	8000826 <GPIO_Init+0x1c2>
 80007ee:	2303      	movs	r3, #3
 80007f0:	e019      	b.n	8000826 <GPIO_Init+0x1c2>
 80007f2:	2302      	movs	r3, #2
 80007f4:	e017      	b.n	8000826 <GPIO_Init+0x1c2>
 80007f6:	2301      	movs	r3, #1
 80007f8:	e015      	b.n	8000826 <GPIO_Init+0x1c2>
 80007fa:	bf00      	nop
 80007fc:	40013c00 	.word	0x40013c00
 8000800:	40020000 	.word	0x40020000
 8000804:	40020400 	.word	0x40020400
 8000808:	40020800 	.word	0x40020800
 800080c:	40020c00 	.word	0x40020c00
 8000810:	40021000 	.word	0x40021000
 8000814:	40021400 	.word	0x40021400
 8000818:	40021800 	.word	0x40021800
 800081c:	40021c00 	.word	0x40021c00
 8000820:	40022000 	.word	0x40022000
 8000824:	2300      	movs	r3, #0
 8000826:	747b      	strb	r3, [r7, #17]
		SYSCFG_PCLK_EN();
 8000828:	4b59      	ldr	r3, [pc, #356]	; (8000990 <GPIO_Init+0x32c>)
 800082a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800082c:	4a58      	ldr	r2, [pc, #352]	; (8000990 <GPIO_Init+0x32c>)
 800082e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000832:	6453      	str	r3, [r2, #68]	; 0x44
		SYSCFG->EXTICR[temp1] = portcode << ( temp2 * 4);
 8000834:	7c7a      	ldrb	r2, [r7, #17]
 8000836:	7cbb      	ldrb	r3, [r7, #18]
 8000838:	009b      	lsls	r3, r3, #2
 800083a:	fa02 f103 	lsl.w	r1, r2, r3
 800083e:	4a55      	ldr	r2, [pc, #340]	; (8000994 <GPIO_Init+0x330>)
 8000840:	7cfb      	ldrb	r3, [r7, #19]
 8000842:	3302      	adds	r3, #2
 8000844:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

		//3 . enable the exti interrupt delivery using IMR
		EXTI->IMR |= 1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber;
 8000848:	4b53      	ldr	r3, [pc, #332]	; (8000998 <GPIO_Init+0x334>)
 800084a:	681b      	ldr	r3, [r3, #0]
 800084c:	687a      	ldr	r2, [r7, #4]
 800084e:	7912      	ldrb	r2, [r2, #4]
 8000850:	4611      	mov	r1, r2
 8000852:	2201      	movs	r2, #1
 8000854:	408a      	lsls	r2, r1
 8000856:	4611      	mov	r1, r2
 8000858:	4a4f      	ldr	r2, [pc, #316]	; (8000998 <GPIO_Init+0x334>)
 800085a:	430b      	orrs	r3, r1
 800085c:	6013      	str	r3, [r2, #0]
	}

	//2. configure the speed
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinSpeed << ( 2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber) );
 800085e:	687b      	ldr	r3, [r7, #4]
 8000860:	799b      	ldrb	r3, [r3, #6]
 8000862:	461a      	mov	r2, r3
 8000864:	687b      	ldr	r3, [r7, #4]
 8000866:	791b      	ldrb	r3, [r3, #4]
 8000868:	005b      	lsls	r3, r3, #1
 800086a:	fa02 f303 	lsl.w	r3, r2, r3
 800086e:	617b      	str	r3, [r7, #20]
	pGPIOHandle->pGPIOx->OSPEEDR &= ~( 0x3 << ( 2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber)); //clearing
 8000870:	687b      	ldr	r3, [r7, #4]
 8000872:	681b      	ldr	r3, [r3, #0]
 8000874:	689a      	ldr	r2, [r3, #8]
 8000876:	687b      	ldr	r3, [r7, #4]
 8000878:	791b      	ldrb	r3, [r3, #4]
 800087a:	005b      	lsls	r3, r3, #1
 800087c:	2103      	movs	r1, #3
 800087e:	fa01 f303 	lsl.w	r3, r1, r3
 8000882:	43db      	mvns	r3, r3
 8000884:	4619      	mov	r1, r3
 8000886:	687b      	ldr	r3, [r7, #4]
 8000888:	681b      	ldr	r3, [r3, #0]
 800088a:	400a      	ands	r2, r1
 800088c:	609a      	str	r2, [r3, #8]
	pGPIOHandle->pGPIOx->OSPEEDR |= temp;
 800088e:	687b      	ldr	r3, [r7, #4]
 8000890:	681b      	ldr	r3, [r3, #0]
 8000892:	6899      	ldr	r1, [r3, #8]
 8000894:	687b      	ldr	r3, [r7, #4]
 8000896:	681b      	ldr	r3, [r3, #0]
 8000898:	697a      	ldr	r2, [r7, #20]
 800089a:	430a      	orrs	r2, r1
 800089c:	609a      	str	r2, [r3, #8]

	//3. configure the pupd settings
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinPuPdControl << ( 2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber) );
 800089e:	687b      	ldr	r3, [r7, #4]
 80008a0:	79db      	ldrb	r3, [r3, #7]
 80008a2:	461a      	mov	r2, r3
 80008a4:	687b      	ldr	r3, [r7, #4]
 80008a6:	791b      	ldrb	r3, [r3, #4]
 80008a8:	005b      	lsls	r3, r3, #1
 80008aa:	fa02 f303 	lsl.w	r3, r2, r3
 80008ae:	617b      	str	r3, [r7, #20]
	pGPIOHandle->pGPIOx->PUPDR &= ~( 0x3 << ( 2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber)); //clearing
 80008b0:	687b      	ldr	r3, [r7, #4]
 80008b2:	681b      	ldr	r3, [r3, #0]
 80008b4:	68da      	ldr	r2, [r3, #12]
 80008b6:	687b      	ldr	r3, [r7, #4]
 80008b8:	791b      	ldrb	r3, [r3, #4]
 80008ba:	005b      	lsls	r3, r3, #1
 80008bc:	2103      	movs	r1, #3
 80008be:	fa01 f303 	lsl.w	r3, r1, r3
 80008c2:	43db      	mvns	r3, r3
 80008c4:	4619      	mov	r1, r3
 80008c6:	687b      	ldr	r3, [r7, #4]
 80008c8:	681b      	ldr	r3, [r3, #0]
 80008ca:	400a      	ands	r2, r1
 80008cc:	60da      	str	r2, [r3, #12]
	pGPIOHandle->pGPIOx->PUPDR |= temp;
 80008ce:	687b      	ldr	r3, [r7, #4]
 80008d0:	681b      	ldr	r3, [r3, #0]
 80008d2:	68d9      	ldr	r1, [r3, #12]
 80008d4:	687b      	ldr	r3, [r7, #4]
 80008d6:	681b      	ldr	r3, [r3, #0]
 80008d8:	697a      	ldr	r2, [r7, #20]
 80008da:	430a      	orrs	r2, r1
 80008dc:	60da      	str	r2, [r3, #12]


	//4. configure the optype
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinOPType << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber );
 80008de:	687b      	ldr	r3, [r7, #4]
 80008e0:	7a1b      	ldrb	r3, [r3, #8]
 80008e2:	461a      	mov	r2, r3
 80008e4:	687b      	ldr	r3, [r7, #4]
 80008e6:	791b      	ldrb	r3, [r3, #4]
 80008e8:	fa02 f303 	lsl.w	r3, r2, r3
 80008ec:	617b      	str	r3, [r7, #20]
	pGPIOHandle->pGPIOx->OTYPER &= ~( 0x1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber); //clearing
 80008ee:	687b      	ldr	r3, [r7, #4]
 80008f0:	681b      	ldr	r3, [r3, #0]
 80008f2:	685a      	ldr	r2, [r3, #4]
 80008f4:	687b      	ldr	r3, [r7, #4]
 80008f6:	791b      	ldrb	r3, [r3, #4]
 80008f8:	4619      	mov	r1, r3
 80008fa:	2301      	movs	r3, #1
 80008fc:	408b      	lsls	r3, r1
 80008fe:	43db      	mvns	r3, r3
 8000900:	4619      	mov	r1, r3
 8000902:	687b      	ldr	r3, [r7, #4]
 8000904:	681b      	ldr	r3, [r3, #0]
 8000906:	400a      	ands	r2, r1
 8000908:	605a      	str	r2, [r3, #4]
	pGPIOHandle->pGPIOx->OTYPER |= temp;
 800090a:	687b      	ldr	r3, [r7, #4]
 800090c:	681b      	ldr	r3, [r3, #0]
 800090e:	6859      	ldr	r1, [r3, #4]
 8000910:	687b      	ldr	r3, [r7, #4]
 8000912:	681b      	ldr	r3, [r3, #0]
 8000914:	697a      	ldr	r2, [r7, #20]
 8000916:	430a      	orrs	r2, r1
 8000918:	605a      	str	r2, [r3, #4]

	//5. configure the alt functionality
	if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_ALTFN)
 800091a:	687b      	ldr	r3, [r7, #4]
 800091c:	795b      	ldrb	r3, [r3, #5]
 800091e:	2b02      	cmp	r3, #2
 8000920:	d131      	bne.n	8000986 <GPIO_Init+0x322>
	{
		//configure the alt function registers.
		uint8_t temp1, temp2;

		temp1 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber / 8;
 8000922:	687b      	ldr	r3, [r7, #4]
 8000924:	791b      	ldrb	r3, [r3, #4]
 8000926:	08db      	lsrs	r3, r3, #3
 8000928:	743b      	strb	r3, [r7, #16]
		temp2 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber  % 8;
 800092a:	687b      	ldr	r3, [r7, #4]
 800092c:	791b      	ldrb	r3, [r3, #4]
 800092e:	f003 0307 	and.w	r3, r3, #7
 8000932:	73fb      	strb	r3, [r7, #15]
		pGPIOHandle->pGPIOx->AFR[temp1] &= ~(0xF << ( 4 * temp2 ) ); //clearing
 8000934:	687b      	ldr	r3, [r7, #4]
 8000936:	681b      	ldr	r3, [r3, #0]
 8000938:	7c3a      	ldrb	r2, [r7, #16]
 800093a:	3208      	adds	r2, #8
 800093c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8000940:	7bfb      	ldrb	r3, [r7, #15]
 8000942:	009b      	lsls	r3, r3, #2
 8000944:	220f      	movs	r2, #15
 8000946:	fa02 f303 	lsl.w	r3, r2, r3
 800094a:	43db      	mvns	r3, r3
 800094c:	4618      	mov	r0, r3
 800094e:	687b      	ldr	r3, [r7, #4]
 8000950:	681b      	ldr	r3, [r3, #0]
 8000952:	7c3a      	ldrb	r2, [r7, #16]
 8000954:	4001      	ands	r1, r0
 8000956:	3208      	adds	r2, #8
 8000958:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		pGPIOHandle->pGPIOx->AFR[temp1] |= (pGPIOHandle->GPIO_PinConfig.GPIO_PinAltFunMode << ( 4 * temp2 ) );
 800095c:	687b      	ldr	r3, [r7, #4]
 800095e:	681b      	ldr	r3, [r3, #0]
 8000960:	7c3a      	ldrb	r2, [r7, #16]
 8000962:	3208      	adds	r2, #8
 8000964:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8000968:	687b      	ldr	r3, [r7, #4]
 800096a:	7a5b      	ldrb	r3, [r3, #9]
 800096c:	461a      	mov	r2, r3
 800096e:	7bfb      	ldrb	r3, [r7, #15]
 8000970:	009b      	lsls	r3, r3, #2
 8000972:	fa02 f303 	lsl.w	r3, r2, r3
 8000976:	4618      	mov	r0, r3
 8000978:	687b      	ldr	r3, [r7, #4]
 800097a:	681b      	ldr	r3, [r3, #0]
 800097c:	7c3a      	ldrb	r2, [r7, #16]
 800097e:	4301      	orrs	r1, r0
 8000980:	3208      	adds	r2, #8
 8000982:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	}

}
 8000986:	bf00      	nop
 8000988:	3718      	adds	r7, #24
 800098a:	46bd      	mov	sp, r7
 800098c:	bd80      	pop	{r7, pc}
 800098e:	bf00      	nop
 8000990:	40023800 	.word	0x40023800
 8000994:	40013800 	.word	0x40013800
 8000998:	40013c00 	.word	0x40013c00

0800099c <GPIO_ReadFromInputPin>:
 *
 * @Note              -

 */
uint8_t GPIO_ReadFromInputPin(GPIO_RegDef_t *pGPIOx, uint8_t PinNumber)
{
 800099c:	b480      	push	{r7}
 800099e:	b085      	sub	sp, #20
 80009a0:	af00      	add	r7, sp, #0
 80009a2:	6078      	str	r0, [r7, #4]
 80009a4:	460b      	mov	r3, r1
 80009a6:	70fb      	strb	r3, [r7, #3]
   uint8_t value;

   value = (uint8_t )((pGPIOx->IDR  >> PinNumber) & 0x00000001 ) ;
 80009a8:	687b      	ldr	r3, [r7, #4]
 80009aa:	691a      	ldr	r2, [r3, #16]
 80009ac:	78fb      	ldrb	r3, [r7, #3]
 80009ae:	fa22 f303 	lsr.w	r3, r2, r3
 80009b2:	b2db      	uxtb	r3, r3
 80009b4:	f003 0301 	and.w	r3, r3, #1
 80009b8:	73fb      	strb	r3, [r7, #15]

   return value;
 80009ba:	7bfb      	ldrb	r3, [r7, #15]
}
 80009bc:	4618      	mov	r0, r3
 80009be:	3714      	adds	r7, #20
 80009c0:	46bd      	mov	sp, r7
 80009c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009c6:	4770      	bx	lr

080009c8 <GPIO_WriteToOutputPin>:
 *
 * @Note              -

 */
void GPIO_WriteToOutputPin(GPIO_RegDef_t *pGPIOx, uint8_t PinNumber, uint8_t Value)
{
 80009c8:	b480      	push	{r7}
 80009ca:	b083      	sub	sp, #12
 80009cc:	af00      	add	r7, sp, #0
 80009ce:	6078      	str	r0, [r7, #4]
 80009d0:	460b      	mov	r3, r1
 80009d2:	70fb      	strb	r3, [r7, #3]
 80009d4:	4613      	mov	r3, r2
 80009d6:	70bb      	strb	r3, [r7, #2]

	if(Value == GPIO_PIN_SET)
 80009d8:	78bb      	ldrb	r3, [r7, #2]
 80009da:	2b01      	cmp	r3, #1
 80009dc:	d109      	bne.n	80009f2 <GPIO_WriteToOutputPin+0x2a>
	{
		//write 1 to the output data register at the bit field corresponding to the pin number
		pGPIOx->ODR |= ( 1 << PinNumber);
 80009de:	687b      	ldr	r3, [r7, #4]
 80009e0:	695b      	ldr	r3, [r3, #20]
 80009e2:	78fa      	ldrb	r2, [r7, #3]
 80009e4:	2101      	movs	r1, #1
 80009e6:	fa01 f202 	lsl.w	r2, r1, r2
 80009ea:	431a      	orrs	r2, r3
 80009ec:	687b      	ldr	r3, [r7, #4]
 80009ee:	615a      	str	r2, [r3, #20]
	}else
	{
		//write 0
		pGPIOx->ODR &= ~( 1 << PinNumber);
	}
}
 80009f0:	e009      	b.n	8000a06 <GPIO_WriteToOutputPin+0x3e>
		pGPIOx->ODR &= ~( 1 << PinNumber);
 80009f2:	687b      	ldr	r3, [r7, #4]
 80009f4:	695b      	ldr	r3, [r3, #20]
 80009f6:	78fa      	ldrb	r2, [r7, #3]
 80009f8:	2101      	movs	r1, #1
 80009fa:	fa01 f202 	lsl.w	r2, r1, r2
 80009fe:	43d2      	mvns	r2, r2
 8000a00:	401a      	ands	r2, r3
 8000a02:	687b      	ldr	r3, [r7, #4]
 8000a04:	615a      	str	r2, [r3, #20]
}
 8000a06:	bf00      	nop
 8000a08:	370c      	adds	r7, #12
 8000a0a:	46bd      	mov	sp, r7
 8000a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a10:	4770      	bx	lr
	...

08000a14 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000a14:	480d      	ldr	r0, [pc, #52]	; (8000a4c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000a16:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000a18:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000a1c:	480c      	ldr	r0, [pc, #48]	; (8000a50 <LoopForever+0x6>)
  ldr r1, =_edata
 8000a1e:	490d      	ldr	r1, [pc, #52]	; (8000a54 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000a20:	4a0d      	ldr	r2, [pc, #52]	; (8000a58 <LoopForever+0xe>)
  movs r3, #0
 8000a22:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000a24:	e002      	b.n	8000a2c <LoopCopyDataInit>

08000a26 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000a26:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000a28:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000a2a:	3304      	adds	r3, #4

08000a2c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000a2c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000a2e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000a30:	d3f9      	bcc.n	8000a26 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000a32:	4a0a      	ldr	r2, [pc, #40]	; (8000a5c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000a34:	4c0a      	ldr	r4, [pc, #40]	; (8000a60 <LoopForever+0x16>)
  movs r3, #0
 8000a36:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000a38:	e001      	b.n	8000a3e <LoopFillZerobss>

08000a3a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000a3a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000a3c:	3204      	adds	r2, #4

08000a3e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000a3e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000a40:	d3fb      	bcc.n	8000a3a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000a42:	f000 f811 	bl	8000a68 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000a46:	f7ff fd57 	bl	80004f8 <main>

08000a4a <LoopForever>:

LoopForever:
    b LoopForever
 8000a4a:	e7fe      	b.n	8000a4a <LoopForever>
  ldr   r0, =_estack
 8000a4c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000a50:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000a54:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 8000a58:	08000ad0 	.word	0x08000ad0
  ldr r2, =_sbss
 8000a5c:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 8000a60:	20000028 	.word	0x20000028

08000a64 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000a64:	e7fe      	b.n	8000a64 <ADC_IRQHandler>
	...

08000a68 <__libc_init_array>:
 8000a68:	b570      	push	{r4, r5, r6, lr}
 8000a6a:	4d0d      	ldr	r5, [pc, #52]	; (8000aa0 <__libc_init_array+0x38>)
 8000a6c:	4c0d      	ldr	r4, [pc, #52]	; (8000aa4 <__libc_init_array+0x3c>)
 8000a6e:	1b64      	subs	r4, r4, r5
 8000a70:	10a4      	asrs	r4, r4, #2
 8000a72:	2600      	movs	r6, #0
 8000a74:	42a6      	cmp	r6, r4
 8000a76:	d109      	bne.n	8000a8c <__libc_init_array+0x24>
 8000a78:	4d0b      	ldr	r5, [pc, #44]	; (8000aa8 <__libc_init_array+0x40>)
 8000a7a:	4c0c      	ldr	r4, [pc, #48]	; (8000aac <__libc_init_array+0x44>)
 8000a7c:	f000 f818 	bl	8000ab0 <_init>
 8000a80:	1b64      	subs	r4, r4, r5
 8000a82:	10a4      	asrs	r4, r4, #2
 8000a84:	2600      	movs	r6, #0
 8000a86:	42a6      	cmp	r6, r4
 8000a88:	d105      	bne.n	8000a96 <__libc_init_array+0x2e>
 8000a8a:	bd70      	pop	{r4, r5, r6, pc}
 8000a8c:	f855 3b04 	ldr.w	r3, [r5], #4
 8000a90:	4798      	blx	r3
 8000a92:	3601      	adds	r6, #1
 8000a94:	e7ee      	b.n	8000a74 <__libc_init_array+0xc>
 8000a96:	f855 3b04 	ldr.w	r3, [r5], #4
 8000a9a:	4798      	blx	r3
 8000a9c:	3601      	adds	r6, #1
 8000a9e:	e7f2      	b.n	8000a86 <__libc_init_array+0x1e>
 8000aa0:	08000ac8 	.word	0x08000ac8
 8000aa4:	08000ac8 	.word	0x08000ac8
 8000aa8:	08000ac8 	.word	0x08000ac8
 8000aac:	08000acc 	.word	0x08000acc

08000ab0 <_init>:
 8000ab0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000ab2:	bf00      	nop
 8000ab4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000ab6:	bc08      	pop	{r3}
 8000ab8:	469e      	mov	lr, r3
 8000aba:	4770      	bx	lr

08000abc <_fini>:
 8000abc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000abe:	bf00      	nop
 8000ac0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000ac2:	bc08      	pop	{r3}
 8000ac4:	469e      	mov	lr, r3
 8000ac6:	4770      	bx	lr
